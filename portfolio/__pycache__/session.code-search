# Query: session
# ContextLines: 1

1783 results - 175 files

myproject\Lib\site-packages\django\conf\global_settings.py:
  472  ############
  473: # SESSIONS #
  474  ############
  475  
  476: # Cache to store session data if using the cache session backend.
  477: SESSION_CACHE_ALIAS = "default"
  478  # Cookie name. This can be whatever you want.
  479: SESSION_COOKIE_NAME = "sessionid"
  480  # Age of cookie, in seconds (default: 2 weeks).
  481: SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2
  482  # A string like "example.com", or None for standard domain cookie.
  483: SESSION_COOKIE_DOMAIN = None
  484: # Whether the session cookie should be secure (https:// only).
  485: SESSION_COOKIE_SECURE = True
  486: # The path of the session cookie.
  487: SESSION_COOKIE_PATH = "/"
  488  # Whether to use the HttpOnly flag.
  489: SESSION_COOKIE_HTTPONLY = True
  490  # Whether to set the flag restricting cookie leaks on cross-site requests.
  491  # This can be 'Lax', 'Strict', 'None', or False to disable the flag.
  492: SESSION_COOKIE_SAMESITE = "Lax"
  493: # Whether to save the session data on every request.
  494: SESSION_SAVE_EVERY_REQUEST = False
  495: # Whether a user's session cookie expires when the web browser is closed.
  496: SESSION_EXPIRE_AT_BROWSER_CLOSE = False
  497: # The module to store session data
  498: SESSION_ENGINE = "django.contrib.sessions.backends.db"
  499: # Directory to store session files if using the file session module. If None,
  500  # the backend will use a sensible default.
  501: SESSION_FILE_PATH = None
  502: # class to serialize session data
  503: SESSION_SERIALIZER = "django.contrib.sessions.serializers.JSONSerializer"
  504  

  572  CSRF_TRUSTED_ORIGINS = []
  573: CSRF_USE_SESSIONS = False
  574  

myproject\Lib\site-packages\django\conf\project_template\project_name\settings.py-tpl:
  36      'django.contrib.contenttypes',
  37:     'django.contrib.sessions',
  38      'django.contrib.messages',

  43      'django.middleware.security.SecurityMiddleware',
  44:     'django.contrib.sessions.middleware.SessionMiddleware',
  45      'django.middleware.common.CommonMiddleware',

myproject\Lib\site-packages\django\contrib\admin\checks.py:
  157      if not _contains_subclass(
  158:         "django.contrib.sessions.middleware.SessionMiddleware", settings.MIDDLEWARE
  159      ):

  161              checks.Error(
  162:                 "'django.contrib.sessions.middleware.SessionMiddleware' must "
  163                  "be in MIDDLEWARE in order to use the admin application.",

  165                      "Insert "
  166:                     "'django.contrib.sessions.middleware.SessionMiddleware' "
  167                      "before "

myproject\Lib\site-packages\django\contrib\admin\tests.py:
  23          "django.contrib.contenttypes",
  24:         "django.contrib.sessions",
  25          "django.contrib.sites",

myproject\Lib\site-packages\django\contrib\admin\locale\ia\LC_MESSAGES\django.po:
  263  msgid "Log in"
  264: msgstr "Aperir session"
  265  

  342  msgid "Log out"
  343: msgstr "Clauder session"
  344  

  550  msgid "Log in again"
  551: msgstr "Aperir session de novo"
  552  

  573  msgid "Your password has been set.  You may go ahead and log in now."
  574: msgstr "Tu contrasigno ha essite reinitialisate. Ora tu pote aperir session."
  575  

myproject\Lib\site-packages\django\contrib\admin\static\admin\js\filters.js:
   6      // Init filters.
   7:     let filters = JSON.parse(sessionStorage.getItem('django.admin.filtersState'));
   8  

  26              filters[`${event.target.dataset.filterTitle}`] = detail.open;
  27:             sessionStorage.setItem('django.admin.filtersState', JSON.stringify(filters));
  28          });

myproject\Lib\site-packages\django\contrib\admin\static\admin\js\nav_sidebar.js:
  85              }
  86:             sessionStorage.setItem('django.admin.navSidebarFilterValue', filterValue);
  87          }

  93  
  94:         const storedValue = sessionStorage.getItem('django.admin.navSidebarFilterValue');
  95          if (storedValue) {

myproject\Lib\site-packages\django\contrib\auth\__init__.py:
   13  
   14: SESSION_KEY = "_auth_user_id"
   15: BACKEND_SESSION_KEY = "_auth_user_backend"
   16: HASH_SESSION_KEY = "_auth_user_hash"
   17  REDIRECT_FIELD_NAME = "next"

   56  
   57: def _get_user_session_key(request):
   58:     # This value in the session is always serialized to a string, so we need
   59      # to convert it back to Python whenever we access it.
   60:     return get_user_model()._meta.pk.to_python(request.session[SESSION_KEY])
   61  

   97      have to reauthenticate on every request. Note that data set during
   98:     the anonymous session is retained when the user logs in.
   99      """
  100:     session_auth_hash = ""
  101      if user is None:
  102          user = request.user
  103:     if hasattr(user, "get_session_auth_hash"):
  104:         session_auth_hash = user.get_session_auth_hash()
  105  
  106:     if SESSION_KEY in request.session:
  107:         if _get_user_session_key(request) != user.pk or (
  108:             session_auth_hash
  109              and not constant_time_compare(
  110:                 request.session.get(HASH_SESSION_KEY, ""), session_auth_hash
  111              )
  112          ):
  113:             # To avoid reusing another user's session, create a new, empty
  114:             # session if the existing session corresponds to a different
  115              # authenticated user.
  116:             request.session.flush()
  117      else:
  118:         request.session.cycle_key()
  119  

  137  
  138:     request.session[SESSION_KEY] = user._meta.pk.value_to_string(user)
  139:     request.session[BACKEND_SESSION_KEY] = backend
  140:     request.session[HASH_SESSION_KEY] = session_auth_hash
  141      if hasattr(request, "user"):

  148      """
  149:     Remove the authenticated user's ID from the request and flush their session
  150      data.

  157      user_logged_out.send(sender=user.__class__, request=request, user=user)
  158:     request.session.flush()
  159      if hasattr(request, "user"):

  183      """
  184:     Return the user model instance associated with the given request session.
  185      If no user is retrieved, return an instance of `AnonymousUser`.

  190      try:
  191:         user_id = _get_user_session_key(request)
  192:         backend_path = request.session[BACKEND_SESSION_KEY]
  193      except KeyError:

  198              user = backend.get_user(user_id)
  199:             # Verify the session
  200:             if hasattr(user, "get_session_auth_hash"):
  201:                 session_hash = request.session.get(HASH_SESSION_KEY)
  202:                 session_hash_verified = session_hash and constant_time_compare(
  203:                     session_hash, user.get_session_auth_hash()
  204                  )
  205:                 if not session_hash_verified:
  206:                     request.session.flush()
  207                      user = None

  218  
  219: def update_session_auth_hash(request, user):
  220      """
  221:     Updating a user's password logs out all sessions for the user.
  222  
  223      Take the current request and the updated user object from which the new
  224:     session hash will be derived and update the session hash appropriately to
  225:     prevent a password change from logging out the session from which the
  226      password was changed.
  227      """
  228:     request.session.cycle_key()
  229:     if hasattr(user, "get_session_auth_hash") and request.user == user:
  230:         request.session[HASH_SESSION_KEY] = user.get_session_auth_hash()

myproject\Lib\site-packages\django\contrib\auth\admin.py:
    4  from django.contrib.admin.utils import unquote
    5: from django.contrib.auth import update_session_auth_hash
    6  from django.contrib.auth.forms import (

  169                  messages.success(request, msg)
  170:                 update_session_auth_hash(request, form.user)
  171                  return HttpResponseRedirect(

myproject\Lib\site-packages\django\contrib\auth\base_user.py:
  126  
  127:     def get_session_auth_hash(self):
  128          """

  130          """
  131:         key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
  132          return salted_hmac(

myproject\Lib\site-packages\django\contrib\auth\middleware.py:
   16      def process_request(self, request):
   17:         if not hasattr(request, "session"):
   18              raise ImproperlyConfigured(
   19:                 "The Django authentication middleware requires session "
   20                  "middleware to be installed. Edit your MIDDLEWARE setting to "
   21                  "insert "
   22:                 "'django.contrib.sessions.middleware.SessionMiddleware' before "
   23                  "'django.contrib.auth.middleware.AuthenticationMiddleware'."

   34      If authentication is successful, the user is automatically logged in to
   35:     persist the user in the session.
   36  

   68          # getting passed in the headers, then the correct user is already
   69:         # persisted in the session and we don't need to continue.
   70          if request.user.is_authenticated:

   77  
   78:         # We are seeing this user for the first time in this session, attempt
   79          # to authenticate the user.

   81          if user:
   82:             # User is valid.  Set request.user and persist user in the session
   83              # by logging the user in.

   91          """
   92:         backend_str = request.session[auth.BACKEND_SESSION_KEY]
   93          backend = auth.load_backend(backend_str)

  106              stored_backend = load_backend(
  107:                 request.session.get(auth.BACKEND_SESSION_KEY, "")
  108              )

myproject\Lib\site-packages\django\contrib\auth\views.py:
    9  from django.contrib.auth import logout as auth_logout
   10: from django.contrib.auth import update_session_auth_hash
   11  from django.contrib.auth.decorators import login_required

  154          if redirect_to != request.get_full_path():
  155:             # Redirect to target page once the session has been cleared.
  156              return HttpResponseRedirect(redirect_to)

  258  
  259: INTERNAL_RESET_SESSION_TOKEN = "_password_reset_token"
  260  

  290              if token == self.reset_url_token:
  291:                 session_token = self.request.session.get(INTERNAL_RESET_SESSION_TOKEN)
  292:                 if self.token_generator.check_token(self.user, session_token):
  293                      # If the token is valid, display the password reset form.

  297                  if self.token_generator.check_token(self.user, token):
  298:                     # Store the token in the session and redirect to the
  299                      # password reset form at a URL without the token. That

  301                      # HTTP Referer header.
  302:                     self.request.session[INTERNAL_RESET_SESSION_TOKEN] = token
  303                      redirect_url = self.request.path.replace(

  332          user = form.save()
  333:         del self.request.session[INTERNAL_RESET_SESSION_TOKEN]
  334          if self.post_reset_login:

  381          form.save()
  382:         # Updating the password logs out all other sessions for the user
  383          # except the current one.
  384:         update_session_auth_hash(self.request, form.user)
  385          return super().form_valid(form)

myproject\Lib\site-packages\django\contrib\auth\locale\ia\LC_MESSAGES\django.po:
   46  msgid "last login"
   47: msgstr "ultime session"
   48  

  207  msgid "Designates whether the user can log into this admin site."
  208: msgstr "Indica si le usator pote aperir session in iste sito administrative."
  209  

  288  msgid "Logged out"
  289: msgstr "Session claudite"
  290  

myproject\Lib\site-packages\django\contrib\messages\storage\base.py:
   9      Represent an actual message that can be stored in any of the supported
  10:     storage classes (typically session- or cookie-based) and rendered in a view
  11      or template.

myproject\Lib\site-packages\django\contrib\messages\storage\cookie.py:
   69      # HTTP headers. In order to leave some room for other cookies and headers,
   70:     # restrict the session cookie to 1/2 of 4kb. See #18781.
   71      max_cookie_size = 2048

  102                  encoded_data,
  103:                 domain=settings.SESSION_COOKIE_DOMAIN,
  104:                 secure=settings.SESSION_COOKIE_SECURE or None,
  105:                 httponly=settings.SESSION_COOKIE_HTTPONLY or None,
  106:                 samesite=settings.SESSION_COOKIE_SAMESITE,
  107              )

  110                  self.cookie_name,
  111:                 domain=settings.SESSION_COOKIE_DOMAIN,
  112:                 samesite=settings.SESSION_COOKIE_SAMESITE,
  113              )

myproject\Lib\site-packages\django\contrib\messages\storage\fallback.py:
   2  from django.contrib.messages.storage.cookie import CookieStorage
   3: from django.contrib.messages.storage.session import SessionStorage
   4  

  11  
  12:     storage_classes = (CookieStorage, SessionStorage)
  13  

myproject\Lib\site-packages\django\contrib\messages\storage\session.py:
   7  
   8: class SessionStorage(BaseStorage):
   9      """
  10:     Store messages in the session (that is, django.contrib.sessions).
  11      """
  12  
  13:     session_key = "_messages"
  14  
  15      def __init__(self, request, *args, **kwargs):
  16:         if not hasattr(request, "session"):
  17              raise ImproperlyConfigured(
  18:                 "The session-based temporary message storage requires session "
  19                  "middleware to be installed, and come before the message "

  25          """
  26:         Retrieve a list of messages from the request's session. This storage
  27          always stores everything it is given, so return True for the

  30          return (
  31:             self.deserialize_messages(self.request.session.get(self.session_key)),
  32              True,

  36          """
  37:         Store a list of messages to the request's session.
  38          """
  39          if messages:
  40:             self.request.session[self.session_key] = self.serialize_messages(messages)
  41          else:
  42:             self.request.session.pop(self.session_key, None)
  43          return []

myproject\Lib\site-packages\django\contrib\sessions\apps.py:
  4  
  5: class SessionsConfig(AppConfig):
  6:     name = "django.contrib.sessions"
  7:     verbose_name = _("Sessions")

myproject\Lib\site-packages\django\contrib\sessions\base_session.py:
   1  """
   2: This module allows importing AbstractBaseSession even
   3: when django.contrib.sessions is not in INSTALLED_APPS.
   4  """

   8  
   9: class BaseSessionManager(models.Manager):
  10:     def encode(self, session_dict):
  11          """
  12:         Return the given session dictionary serialized and encoded as a string.
  13          """
  14:         session_store_class = self.model.get_session_store_class()
  15:         return session_store_class().encode(session_dict)
  16  
  17:     def save(self, session_key, session_dict, expire_date):
  18:         s = self.model(session_key, self.encode(session_dict), expire_date)
  19:         if session_dict:
  20              s.save()
  21          else:
  22:             s.delete()  # Clear sessions with no data.
  23          return s

  25  
  26: class AbstractBaseSession(models.Model):
  27:     session_key = models.CharField(_("session key"), max_length=40, primary_key=True)
  28:     session_data = models.TextField(_("session data"))
  29      expire_date = models.DateTimeField(_("expire date"), db_index=True)
  30  
  31:     objects = BaseSessionManager()
  32  

  34          abstract = True
  35:         verbose_name = _("session")
  36:         verbose_name_plural = _("sessions")
  37  
  38      def __str__(self):
  39:         return self.session_key
  40  
  41      @classmethod
  42:     def get_session_store_class(cls):
  43          raise NotImplementedError

  45      def get_decoded(self):
  46:         session_store_class = self.get_session_store_class()
  47:         return session_store_class().decode(self.session_data)

myproject\Lib\site-packages\django\contrib\sessions\exceptions.py:
   3  
   4: class InvalidSessionKey(SuspiciousOperation):
   5:     """Invalid characters in session key"""
   6  

   9  
  10: class SuspiciousSession(SuspiciousOperation):
  11:     """The session may be tampered with"""
  12  

  15  
  16: class SessionInterrupted(BadRequest):
  17:     """The session was interrupted."""
  18  

myproject\Lib\site-packages\django\contrib\sessions\middleware.py:
   4  from django.conf import settings
   5: from django.contrib.sessions.backends.base import UpdateError
   6: from django.contrib.sessions.exceptions import SessionInterrupted
   7  from django.utils.cache import patch_vary_headers

  11  
  12: class SessionMiddleware(MiddlewareMixin):
  13      def __init__(self, get_response):
  14          super().__init__(get_response)
  15:         engine = import_module(settings.SESSION_ENGINE)
  16:         self.SessionStore = engine.SessionStore
  17  
  18      def process_request(self, request):
  19:         session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)
  20:         request.session = self.SessionStore(session_key)
  21  

  23          """
  24:         If request.session was modified, or if the configuration is to save the
  25:         session every time, save the changes and set a session cookie or delete
  26:         the session cookie if the session has been emptied.
  27          """
  28          try:
  29:             accessed = request.session.accessed
  30:             modified = request.session.modified
  31:             empty = request.session.is_empty()
  32          except AttributeError:

  34          # First check if we need to delete this cookie.
  35:         # The session should be deleted only if the session is entirely empty.
  36:         if settings.SESSION_COOKIE_NAME in request.COOKIES and empty:
  37              response.delete_cookie(
  38:                 settings.SESSION_COOKIE_NAME,
  39:                 path=settings.SESSION_COOKIE_PATH,
  40:                 domain=settings.SESSION_COOKIE_DOMAIN,
  41:                 samesite=settings.SESSION_COOKIE_SAMESITE,
  42              )

  46                  patch_vary_headers(response, ("Cookie",))
  47:             if (modified or settings.SESSION_SAVE_EVERY_REQUEST) and not empty:
  48:                 if request.session.get_expire_at_browser_close():
  49                      max_age = None

  51                  else:
  52:                     max_age = request.session.get_expiry_age()
  53                      expires_time = time.time() + max_age
  54                      expires = http_date(expires_time)
  55:                 # Save the session data and refresh the client cookie.
  56:                 # Skip session save for 500 responses, refs #3881.
  57                  if response.status_code != 500:
  58                      try:
  59:                         request.session.save()
  60                      except UpdateError:
  61:                         raise SessionInterrupted(
  62:                             "The request's session was deleted before the "
  63                              "request completed. The user may have logged "

  66                      response.set_cookie(
  67:                         settings.SESSION_COOKIE_NAME,
  68:                         request.session.session_key,
  69                          max_age=max_age,
  70                          expires=expires,
  71:                         domain=settings.SESSION_COOKIE_DOMAIN,
  72:                         path=settings.SESSION_COOKIE_PATH,
  73:                         secure=settings.SESSION_COOKIE_SECURE or None,
  74:                         httponly=settings.SESSION_COOKIE_HTTPONLY or None,
  75:                         samesite=settings.SESSION_COOKIE_SAMESITE,
  76                      )

myproject\Lib\site-packages\django\contrib\sessions\models.py:
   1: from django.contrib.sessions.base_session import AbstractBaseSession, BaseSessionManager
   2  
   3  
   4: class SessionManager(BaseSessionManager):
   5      use_in_migrations = True

   7  
   8: class Session(AbstractBaseSession):
   9      """
  10:     Django provides full support for anonymous sessions. The session
  11      framework lets you store and retrieve arbitrary data on a

  13      abstracts the sending and receiving of cookies. Cookies contain a
  14:     session ID -- not the data itself.
  15  
  16:     The Django sessions framework is entirely cookie-based. It does
  17:     not fall back to putting session IDs in URLs. This is an intentional
  18      design decision. Not only does that behavior make URLs ugly, it makes
  19:     your site vulnerable to session-ID theft via the "Referer" header.
  20  
  21:     For complete documentation on using Sessions in your code, consult
  22:     the sessions documentation that is shipped with Django (also available
  23      on the Django web site).

  25  
  26:     objects = SessionManager()
  27  
  28      @classmethod
  29:     def get_session_store_class(cls):
  30:         from django.contrib.sessions.backends.db import SessionStore
  31  
  32:         return SessionStore
  33  
  34:     class Meta(AbstractBaseSession.Meta):
  35:         db_table = "django_session"

myproject\Lib\site-packages\django\contrib\sessions\backends\base.py:
   10  
   11: # session_key should not be case sensitive because some backends can store it
   12  # on case insensitive file systems.

   18      Used internally as a consistent exception type to catch from save (see the
   19:     docstring for SessionBase.save() for details).
   20      """

   26      """
   27:     Occurs if Django tries to update a session that was deleted.
   28      """

   32  
   33: class SessionBase:
   34      """
   35:     Base class for all Session classes.
   36      """

   42  
   43:     def __init__(self, session_key=None):
   44:         self._session_key = session_key
   45          self.accessed = False
   46          self.modified = False
   47:         self.serializer = import_string(settings.SESSION_SERIALIZER)
   48  
   49      def __contains__(self, key):
   50:         return key in self._session
   51  
   52      def __getitem__(self, key):
   53:         return self._session[key]
   54  
   55      def __setitem__(self, key, value):
   56:         self._session[key] = value
   57          self.modified = True

   59      def __delitem__(self, key):
   60:         del self._session[key]
   61          self.modified = True

   64      def key_salt(self):
   65:         return "django.contrib.sessions." + self.__class__.__qualname__
   66  
   67      def get(self, key, default=None):
   68:         return self._session.get(key, default)
   69  
   70      def pop(self, key, default=__not_given):
   71:         self.modified = self.modified or key in self._session
   72          args = () if default is self.__not_given else (default,)
   73:         return self._session.pop(key, *args)
   74  
   75      def setdefault(self, key, value):
   76:         if key in self._session:
   77:             return self._session[key]
   78          else:
   79              self.modified = True
   80:             self._session[key] = value
   81              return value

   91  
   92:     def encode(self, session_dict):
   93:         "Return the given session dictionary serialized and encoded as a string."
   94          return signing.dumps(
   95:             session_dict,
   96              salt=self.key_salt,

  100  
  101:     def decode(self, session_data):
  102          try:
  103              return signing.loads(
  104:                 session_data, salt=self.key_salt, serializer=self.serializer
  105              )
  106          except signing.BadSignature:
  107:             logger = logging.getLogger("django.security.SuspiciousSession")
  108:             logger.warning("Session data corrupted")
  109          except Exception:
  110              # ValueError, unpickling exceptions. If any of these happen, just
  111:             # return an empty dictionary (an empty session).
  112              pass

  115      def update(self, dict_):
  116:         self._session.update(dict_)
  117          self.modified = True

  119      def has_key(self, key):
  120:         return key in self._session
  121  
  122      def keys(self):
  123:         return self._session.keys()
  124  
  125      def values(self):
  126:         return self._session.values()
  127  
  128      def items(self):
  129:         return self._session.items()
  130  

  134          # set it to an empty dict anyway).
  135:         self._session_cache = {}
  136          self.accessed = True

  139      def is_empty(self):
  140:         "Return True when there is no session_key and the session is empty."
  141          try:
  142:             return not self._session_key and not self._session_cache
  143          except AttributeError:

  145  
  146:     def _get_new_session_key(self):
  147:         "Return session key that isn't being used."
  148          while True:
  149:             session_key = get_random_string(32, VALID_KEY_CHARS)
  150:             if not self.exists(session_key):
  151:                 return session_key
  152  
  153:     def _get_or_create_session_key(self):
  154:         if self._session_key is None:
  155:             self._session_key = self._get_new_session_key()
  156:         return self._session_key
  157  
  158:     def _validate_session_key(self, key):
  159          """

  164  
  165:     def _get_session_key(self):
  166:         return self.__session_key
  167  
  168:     def _set_session_key(self, value):
  169          """
  170:         Validate session key on assignment. Invalid values will set to None.
  171          """
  172:         if self._validate_session_key(value):
  173:             self.__session_key = value
  174          else:
  175:             self.__session_key = None
  176  
  177:     session_key = property(_get_session_key)
  178:     _session_key = property(_get_session_key, _set_session_key)
  179  
  180:     def _get_session(self, no_load=False):
  181          """
  182:         Lazily load session from storage (unless "no_load" is True, when only
  183          an empty dict is stored) and store it in the current instance.

  186          try:
  187:             return self._session_cache
  188          except AttributeError:
  189:             if self.session_key is None or no_load:
  190:                 self._session_cache = {}
  191              else:
  192:                 self._session_cache = self.load()
  193:         return self._session_cache
  194  
  195:     _session = property(_get_session)
  196  
  197:     def get_session_cookie_age(self):
  198:         return settings.SESSION_COOKIE_AGE
  199  
  200      def get_expiry_age(self, **kwargs):
  201:         """Get the number of seconds until the session expires.
  202  
  203          Optionally, this function accepts `modification` and `expiry` keyword
  204:         arguments specifying the modification and expiry of the session.
  205          """

  215          except KeyError:
  216:             expiry = self.get("_session_expiry")
  217  
  218          if not expiry:  # Checks both None and 0 cases
  219:             return self.get_session_cookie_age()
  220          if not isinstance(expiry, (datetime, str)):

  227      def get_expiry_date(self, **kwargs):
  228:         """Get session the expiry date (as a datetime object).
  229  
  230          Optionally, this function accepts `modification` and `expiry` keyword
  231:         arguments specifying the modification and expiry of the session.
  232          """

  240          except KeyError:
  241:             expiry = self.get("_session_expiry")
  242  

  246              return datetime.fromisoformat(expiry)
  247:         expiry = expiry or self.get_session_cookie_age()
  248          return modification + timedelta(seconds=expiry)

  251          """
  252:         Set a custom expiration for the session. ``value`` can be an integer,
  253          a Python ``datetime`` or ``timedelta`` object or ``None``.
  254  
  255:         If ``value`` is an integer, the session will expire after that many
  256:         seconds of inactivity. If set to ``0`` then the session will expire on
  257          browser close.
  258  
  259:         If ``value`` is a ``datetime`` or ``timedelta`` object, the session
  260          will expire at that specific future time.
  261  
  262:         If ``value`` is ``None``, the session uses the global session expiry
  263          policy.

  265          if value is None:
  266:             # Remove any custom expiration for this session.
  267              try:
  268:                 del self["_session_expiry"]
  269              except KeyError:

  275              value = value.isoformat()
  276:         self["_session_expiry"] = value
  277  

  279          """
  280:         Return ``True`` if the session is set to expire when the browser
  281          closes, and ``False`` if there's an expiry date. Use

  284          """
  285:         if (expiry := self.get("_session_expiry")) is None:
  286:             return settings.SESSION_EXPIRE_AT_BROWSER_CLOSE
  287          return expiry == 0

  290          """
  291:         Remove the current session data from the database and regenerate the
  292          key.

  295          self.delete()
  296:         self._session_key = None
  297  

  299          """
  300:         Create a new session key, while retaining the current session data.
  301          """
  302:         data = self._session
  303:         key = self.session_key
  304          self.create()
  305:         self._session_cache = data
  306          if key:

  310  
  311:     def exists(self, session_key):
  312          """
  313:         Return True if the given session_key already exists.
  314          """
  315          raise NotImplementedError(
  316:             "subclasses of SessionBase must provide an exists() method"
  317          )

  320          """
  321:         Create a new session instance. Guaranteed to create a new object with
  322          a unique key and will have saved the result once (with empty data)

  325          raise NotImplementedError(
  326:             "subclasses of SessionBase must provide a create() method"
  327          )

  330          """
  331:         Save the session data. If 'must_create' is True, create a new session
  332          object (or raise CreateError). Otherwise, only update an existing

  335          raise NotImplementedError(
  336:             "subclasses of SessionBase must provide a save() method"
  337          )
  338  
  339:     def delete(self, session_key=None):
  340          """
  341:         Delete the session data under this key. If the key is None, use the
  342:         current session key value.
  343          """
  344          raise NotImplementedError(
  345:             "subclasses of SessionBase must provide a delete() method"
  346          )

  349          """
  350:         Load the session data and return a dictionary.
  351          """
  352          raise NotImplementedError(
  353:             "subclasses of SessionBase must provide a load() method"
  354          )

  358          """
  359:         Remove expired sessions from the session store.
  360  

myproject\Lib\site-packages\django\contrib\sessions\backends\cache.py:
   1  from django.conf import settings
   2: from django.contrib.sessions.backends.base import CreateError, SessionBase, UpdateError
   3  from django.core.cache import caches
   4  
   5: KEY_PREFIX = "django.contrib.sessions.cache"
   6  
   7  
   8: class SessionStore(SessionBase):
   9      """
  10:     A cache-based session store.
  11      """

  14  
  15:     def __init__(self, session_key=None):
  16:         self._cache = caches[settings.SESSION_CACHE_ALIAS]
  17:         super().__init__(session_key)
  18  

  20      def cache_key(self):
  21:         return self.cache_key_prefix + self._get_or_create_session_key()
  22  

  24          try:
  25:             session_data = self._cache.get(self.cache_key)
  26          except Exception:
  27              # Some backends (e.g. memcache) raise an exception on invalid
  28:             # cache keys. If this happens, reset the session. See #17810.
  29:             session_data = None
  30:         if session_data is not None:
  31:             return session_data
  32:         self._session_key = None
  33          return {}

  36          # Because a cache can fail silently (e.g. memcache), we don't know if
  37:         # we are failing to create a new session because of a key collision or
  38          # because the cache is missing. So we try for a (large) number of times

  41          for i in range(10000):
  42:             self._session_key = self._get_new_session_key()
  43              try:

  49          raise RuntimeError(
  50:             "Unable to create a new session key. "
  51              "It is likely that the cache is unavailable."

  54      def save(self, must_create=False):
  55:         if self.session_key is None:
  56              return self.create()

  64              self.cache_key,
  65:             self._get_session(no_load=must_create),
  66              self.get_expiry_age(),

  70  
  71:     def exists(self, session_key):
  72          return (
  73:             bool(session_key) and (self.cache_key_prefix + session_key) in self._cache
  74          )
  75  
  76:     def delete(self, session_key=None):
  77:         if session_key is None:
  78:             if self.session_key is None:
  79                  return
  80:             session_key = self.session_key
  81:         self._cache.delete(self.cache_key_prefix + session_key)
  82  

myproject\Lib\site-packages\django\contrib\sessions\backends\cached_db.py:
   1  """
   2: Cached, database-backed sessions.
   3  """

   5  from django.conf import settings
   6: from django.contrib.sessions.backends.db import SessionStore as DBStore
   7  from django.core.cache import caches
   8  
   9: KEY_PREFIX = "django.contrib.sessions.cached_db"
  10  
  11  
  12: class SessionStore(DBStore):
  13      """
  14:     Implement cached, database backed sessions.
  15      """

  18  
  19:     def __init__(self, session_key=None):
  20:         self._cache = caches[settings.SESSION_CACHE_ALIAS]
  21:         super().__init__(session_key)
  22  

  24      def cache_key(self):
  25:         return self.cache_key_prefix + self._get_or_create_session_key()
  26  

  31              # Some backends (e.g. memcache) raise an exception on invalid
  32:             # cache keys. If this happens, reset the session. See #17810.
  33              data = None

  35          if data is None:
  36:             s = self._get_session_from_db()
  37              if s:
  38:                 data = self.decode(s.session_data)
  39                  self._cache.set(

  45  
  46:     def exists(self, session_key):
  47          return (
  48:             session_key
  49:             and (self.cache_key_prefix + session_key) in self._cache
  50:             or super().exists(session_key)
  51          )

  54          super().save(must_create)
  55:         self._cache.set(self.cache_key, self._session, self.get_expiry_age())
  56  
  57:     def delete(self, session_key=None):
  58:         super().delete(session_key)
  59:         if session_key is None:
  60:             if self.session_key is None:
  61                  return
  62:             session_key = self.session_key
  63:         self._cache.delete(self.cache_key_prefix + session_key)
  64  

  66          """
  67:         Remove the current session data from the database and regenerate the
  68          key.

  70          self.clear()
  71:         self.delete(self.session_key)
  72:         self._session_key = None

myproject\Lib\site-packages\django\contrib\sessions\backends\db.py:
    2  
    3: from django.contrib.sessions.backends.base import CreateError, SessionBase, UpdateError
    4  from django.core.exceptions import SuspiciousOperation

    9  
   10: class SessionStore(SessionBase):
   11      """
   12:     Implement database session store.
   13      """
   14  
   15:     def __init__(self, session_key=None):
   16:         super().__init__(session_key)
   17  

   19      def get_model_class(cls):
   20:         # Avoids a circular import and allows importing SessionStore when
   21:         # django.contrib.sessions is not in INSTALLED_APPS.
   22:         from django.contrib.sessions.models import Session
   23  
   24:         return Session
   25  

   29  
   30:     def _get_session_from_db(self):
   31          try:
   32              return self.model.objects.get(
   33:                 session_key=self.session_key, expire_date__gt=timezone.now()
   34              )

   38                  logger.warning(str(e))
   39:             self._session_key = None
   40  
   41      def load(self):
   42:         s = self._get_session_from_db()
   43:         return self.decode(s.session_data) if s else {}
   44  
   45:     def exists(self, session_key):
   46:         return self.model.objects.filter(session_key=session_key).exists()
   47  

   49          while True:
   50:             self._session_key = self._get_new_session_key()
   51              try:

   62          """
   63:         Return a new instance of the session model object, which represents the
   64:         current session state. Intended to be used for saving the session data
   65          to the database.

   67          return self.model(
   68:             session_key=self._get_or_create_session_key(),
   69:             session_data=self.encode(data),
   70              expire_date=self.get_expiry_date(),

   74          """
   75:         Save the current session data to the database. If 'must_create' is
   76          True, raise a database error if the saving operation doesn't create a

   78          """
   79:         if self.session_key is None:
   80              return self.create()
   81:         data = self._get_session(no_load=must_create)
   82          obj = self.create_model_instance(data)

   97  
   98:     def delete(self, session_key=None):
   99:         if session_key is None:
  100:             if self.session_key is None:
  101                  return
  102:             session_key = self.session_key
  103          try:
  104:             self.model.objects.get(session_key=session_key).delete()
  105          except self.model.DoesNotExist:

myproject\Lib\site-packages\django\contrib\sessions\backends\file.py:
    7  from django.conf import settings
    8: from django.contrib.sessions.backends.base import (
    9      VALID_KEY_CHARS,
   10      CreateError,
   11:     SessionBase,
   12      UpdateError,
   13  )
   14: from django.contrib.sessions.exceptions import InvalidSessionKey
   15  from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation

   17  
   18: class SessionStore(SessionBase):
   19      """
   20:     Implement a file based session store.
   21      """
   22  
   23:     def __init__(self, session_key=None):
   24          self.storage_path = self._get_storage_path()
   25:         self.file_prefix = settings.SESSION_COOKIE_NAME
   26:         super().__init__(session_key)
   27  

   33              storage_path = (
   34:                 getattr(settings, "SESSION_FILE_PATH", None) or tempfile.gettempdir()
   35              )

   38                  raise ImproperlyConfigured(
   39:                     "The session storage path %r doesn't exist. Please set your"
   40:                     " SESSION_FILE_PATH setting to an existing directory in which"
   41:                     " Django can store session data." % storage_path
   42                  )

   46  
   47:     def _key_to_file(self, session_key=None):
   48          """
   49:         Get the file associated with this session key.
   50          """
   51:         if session_key is None:
   52:             session_key = self._get_or_create_session_key()
   53  
   54:         # Make sure we're not vulnerable to directory traversal. Session keys
   55          # should always be md5s, so they should never contain directory
   56          # components.
   57:         if not set(session_key).issubset(VALID_KEY_CHARS):
   58:             raise InvalidSessionKey("Invalid characters in session key")
   59  
   60:         return os.path.join(self.storage_path, self.file_prefix + session_key)
   61  

   63          """
   64:         Return the modification time of the file storing the session's content.
   65          """

   69  
   70:     def _expiry_date(self, session_data):
   71          """
   72:         Return the expiry time of the file storing the session's content.
   73          """
   74:         return session_data.get("_session_expiry") or (
   75              self._last_modification()
   76:             + datetime.timedelta(seconds=self.get_session_cookie_age())
   77          )

   79      def load(self):
   80:         session_data = {}
   81          try:
   82:             with open(self._key_to_file(), encoding="ascii") as session_file:
   83:                 file_data = session_file.read()
   84:             # Don't fail if there is no data in the session file.
   85              # We may have opened the empty placeholder file.

   87                  try:
   88:                     session_data = self.decode(file_data)
   89                  except (EOFError, SuspiciousOperation) as e:

   96  
   97:                 # Remove expired sessions.
   98:                 expiry_age = self.get_expiry_age(expiry=self._expiry_date(session_data))
   99                  if expiry_age <= 0:
  100:                     session_data = {}
  101                      self.delete()

  103          except (OSError, SuspiciousOperation):
  104:             self._session_key = None
  105:         return session_data
  106  

  108          while True:
  109:             self._session_key = self._get_new_session_key()
  110              try:

  117      def save(self, must_create=False):
  118:         if self.session_key is None:
  119              return self.create()
  120:         # Get the session data now, before we start messing
  121          # with the file it is stored within.
  122:         session_data = self._get_session(no_load=must_create)
  123  
  124:         session_file_name = self._key_to_file()
  125  

  131                  flags |= os.O_EXCL | os.O_CREAT
  132:             fd = os.open(session_file_name, flags)
  133              os.close(fd)

  140  
  141:         # Write the session file without interfering with other threads
  142          # or processes.  By writing to an atomically generated temporary
  143          # file and then using the atomic os.rename() to make the complete
  144:         # file visible, we avoid having to lock the session file, while
  145          # still maintaining its integrity.
  146          #
  147:         # Note: Locking the session file was explored, but rejected in part
  148          # because in order to be atomic and cross-platform, it required a
  149:         # long-lived lock file for each session, doubling the number of
  150:         # files in the session storage directory at any given time.  This
  151          # rename solution is cleaner and avoids any additional overhead
  152:         # when reading the session data, which is the more common case
  153:         # unless SESSION_SAVE_EVERY_REQUEST = True.
  154          #
  155          # See ticket #8616.
  156:         dir, prefix = os.path.split(session_file_name)
  157  

  164                  try:
  165:                     os.write(output_file_fd, self.encode(session_data).encode())
  166                  finally:

  171                  # and os.unlink (for example on Windows). See #9084.
  172:                 shutil.move(output_file_name, session_file_name)
  173                  renamed = True

  179  
  180:     def exists(self, session_key):
  181:         return os.path.exists(self._key_to_file(session_key))
  182  
  183:     def delete(self, session_key=None):
  184:         if session_key is None:
  185:             if self.session_key is None:
  186                  return
  187:             session_key = self.session_key
  188          try:
  189:             os.unlink(self._key_to_file(session_key))
  190          except OSError:

  198          storage_path = cls._get_storage_path()
  199:         file_prefix = settings.SESSION_COOKIE_NAME
  200  
  201:         for session_file in os.listdir(storage_path):
  202:             if not session_file.startswith(file_prefix):
  203                  continue
  204:             session_key = session_file[len(file_prefix) :]
  205:             session = cls(session_key)
  206:             # When an expired session is loaded, its file is removed, and a
  207              # new file is immediately created. Prevent this by disabling
  208              # the create() method.
  209:             session.create = lambda: None
  210:             session.load()

myproject\Lib\site-packages\django\contrib\sessions\backends\signed_cookies.py:
   1: from django.contrib.sessions.backends.base import SessionBase
   2  from django.core import signing

   4  
   5: class SessionStore(SessionBase):
   6      def load(self):

   8          Load the data from the key itself instead of fetching from some
   9:         external data store. Opposite of _get_session_key(), raise BadSignature
  10          if signature fails.

  13              return signing.loads(
  14:                 self.session_key,
  15                  serializer=self.serializer,
  16                  # This doesn't handle non-default expiry dates, see #19201
  17:                 max_age=self.get_session_cookie_age(),
  18:                 salt="django.contrib.sessions.backends.signed_cookies",
  19              )

  21              # BadSignature, ValueError, or unpickling exceptions. If any of
  22:             # these happen, reset the session.
  23              self.create()

  34          """
  35:         To save, get the session key as a securely signed string and then set
  36          the modified flag so that the cookie is set on the client for the

  38          """
  39:         self._session_key = self._get_session_key()
  40          self.modified = True
  41  
  42:     def exists(self, session_key=None):
  43          """

  49  
  50:     def delete(self, session_key=None):
  51          """
  52:         To delete, clear the session key and the underlying data structure
  53          and set the modified flag so that the cookie is set on the client for

  55          """
  56:         self._session_key = ""
  57:         self._session_cache = {}
  58          self.modified = True

  66  
  67:     def _get_session_key(self):
  68          """
  69          Instead of generating a random string, generate a secure url-safe
  70:         base64-encoded string of data as our session key.
  71          """
  72          return signing.dumps(
  73:             self._session,
  74              compress=True,
  75:             salt="django.contrib.sessions.backends.signed_cookies",
  76              serializer=self.serializer,

myproject\Lib\site-packages\django\contrib\sessions\locale\af\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Sessies"
  22  
  23: msgid "session key"
  24  msgstr "sessiesleutel"
  25  
  26: msgid "session data"
  27  msgstr "sessiedata"

  31  
  32: msgid "session"
  33  msgstr "sessie"
  34  
  35: msgid "sessions"
  36  msgstr "sessies"

myproject\Lib\site-packages\django\contrib\sessions\locale\ar\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "جلسات"
  23  
  24: msgid "session key"
  25  msgstr "مفتاح الجلسة"
  26  
  27: msgid "session data"
  28  msgstr "بيانات الجلسة"

  32  
  33: msgid "session"
  34  msgstr "جلسة"
  35  
  36: msgid "sessions"
  37  msgstr "جلسات"

myproject\Lib\site-packages\django\contrib\sessions\locale\ar_DZ\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "جلسات"
  23  
  24: msgid "session key"
  25  msgstr "مفتاح الجلسة"
  26  
  27: msgid "session data"
  28  msgstr "بيانات الجلسة"

  32  
  33: msgid "session"
  34  msgstr "جلسة"
  35  
  36: msgid "sessions"
  37  msgstr "جلسات"

myproject\Lib\site-packages\django\contrib\sessions\locale\ast\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "clave de sesión"
  25  
  26: msgid "session data"
  27  msgstr "datos de sesión"

  31  
  32: msgid "session"
  33  msgstr "sesión"
  34  
  35: msgid "sessions"
  36  msgstr "sesiones"

myproject\Lib\site-packages\django\contrib\sessions\locale\az\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Seanslar"
  23  
  24: msgid "session key"
  25  msgstr "seans açarı"
  26  
  27: msgid "session data"
  28  msgstr "seansın məlumatları"

  32  
  33: msgid "session"
  34  msgstr "seans"
  35  
  36: msgid "sessions"
  37  msgstr "seanslar"

myproject\Lib\site-packages\django\contrib\sessions\locale\be\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Сесіі"
  24  
  25: msgid "session key"
  26  msgstr "ключ сэансу"
  27  
  28: msgid "session data"
  29  msgstr "зьвесткі сэансу"

  33  
  34: msgid "session"
  35  msgstr "сэсія"
  36  
  37: msgid "sessions"
  38  msgstr "сэсіі"

myproject\Lib\site-packages\django\contrib\sessions\locale\bg\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Сесии"
  24  
  25: msgid "session key"
  26  msgstr "ключ на сесията"
  27  
  28: msgid "session data"
  29  msgstr "данни от сесията"

  33  
  34: msgid "session"
  35  msgstr "сесия"
  36  
  37: msgid "sessions"
  38  msgstr "сесии"

myproject\Lib\site-packages\django\contrib\sessions\locale\bn\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "সেশন কি"
  25  
  26: msgid "session data"
  27  msgstr "সেশন ডাটা"

  31  
  32: msgid "session"
  33  msgstr "সেশন"
  34  
  35: msgid "sessions"
  36  msgstr "সেশনসমূহ"

myproject\Lib\site-packages\django\contrib\sessions\locale\br\LC_MESSAGES\django.po:
  23  
  24: msgid "Sessions"
  25  msgstr "Dalc'hoù"
  26  
  27: msgid "session key"
  28  msgstr "alc'hwez dalc'h"
  29  
  30: msgid "session data"
  31  msgstr "roadennoù an dalc'h"

  35  
  36: msgid "session"
  37  msgstr "dalc'h"
  38  
  39: msgid "sessions"
  40  msgstr "dalc'hoù"

myproject\Lib\site-packages\django\contrib\sessions\locale\bs\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr ""
  23  
  24: msgid "session key"
  25  msgstr "ključ sesije"
  26  
  27: msgid "session data"
  28  msgstr "podaci sesije"

  32  
  33: msgid "session"
  34  msgstr "sesija"
  35  
  36: msgid "sessions"
  37  msgstr "sesije"

myproject\Lib\site-packages\django\contrib\sessions\locale\ca\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22: msgstr "Sessions"
  23  
  24: msgid "session key"
  25  msgstr "clau de la sessió"
  26  
  27: msgid "session data"
  28  msgstr "dades de la sessió"

  32  
  33: msgid "session"
  34  msgstr "sessió"
  35  
  36: msgid "sessions"
  37: msgstr "sessions"

myproject\Lib\site-packages\django\contrib\sessions\locale\cs\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sezení"
  23  
  24: msgid "session key"
  25  msgstr "klíč sezení"
  26  
  27: msgid "session data"
  28  msgstr "data sezení"

  32  
  33: msgid "session"
  34  msgstr "sezení"
  35  
  36: msgid "sessions"
  37  msgstr "sezení"

myproject\Lib\site-packages\django\contrib\sessions\locale\cy\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sesiynau"
  23  
  24: msgid "session key"
  25  msgstr "allwedd sesiwn"
  26  
  27: msgid "session data"
  28  msgstr "data sesiwn"

  32  
  33: msgid "session"
  34  msgstr "sesiwn"
  35  
  36: msgid "sessions"
  37  msgstr "sesiynau"

myproject\Lib\site-packages\django\contrib\sessions\locale\da\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21: msgstr "Sessioner"
  22  
  23: msgid "session key"
  24: msgstr "sessionsnøgle"
  25  
  26: msgid "session data"
  27: msgstr "sessionsdata"
  28  

  31  
  32: msgid "session"
  33: msgstr "session"
  34  
  35: msgid "sessions"
  36: msgstr "sessioner"

myproject\Lib\site-packages\django\contrib\sessions\locale\de\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20: msgstr "Sessions"
  21  
  22: msgid "session key"
  23  msgstr "Sitzungs-ID"
  24  
  25: msgid "session data"
  26  msgstr "Sitzungsdaten"

  30  
  31: msgid "session"
  32  msgstr "Sitzung"
  33  
  34: msgid "sessions"
  35  msgstr "Sitzungen"

myproject\Lib\site-packages\django\contrib\sessions\locale\dsb\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Póseźenja"
  23  
  24: msgid "session key"
  25  msgstr "pósejźeński kluc"
  26  
  27: msgid "session data"
  28  msgstr "pósejźeńske daty"

  32  
  33: msgid "session"
  34  msgstr "pósejźenje"
  35  
  36: msgid "sessions"
  37  msgstr "pósejźenja"

myproject\Lib\site-packages\django\contrib\sessions\locale\el\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Συνεδρίες"
  22  
  23: msgid "session key"
  24  msgstr "κλειδί συνεδρίας"
  25  
  26: msgid "session data"
  27  msgstr "δεδομένα συνεδρίας"

  31  
  32: msgid "session"
  33  msgstr "συνεδρία"
  34  
  35: msgid "sessions"
  36  msgstr "συνεδρίες"

myproject\Lib\site-packages\django\contrib\sessions\locale\en\LC_MESSAGES\django.po:
  15  
  16: #: contrib/sessions/apps.py:8
  17: msgid "Sessions"
  18  msgstr ""
  19  
  20: #: contrib/sessions/models.py:44
  21: msgid "session key"
  22  msgstr ""
  23  
  24: #: contrib/sessions/models.py:46
  25: msgid "session data"
  26  msgstr ""
  27  
  28: #: contrib/sessions/models.py:47
  29  msgid "expire date"

  31  
  32: #: contrib/sessions/models.py:52
  33: msgid "session"
  34  msgstr ""
  35  
  36: #: contrib/sessions/models.py:53
  37: msgid "sessions"
  38  msgstr ""

myproject\Lib\site-packages\django\contrib\sessions\locale\en_AU\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21: msgstr "Sessions"
  22  
  23: msgid "session key"
  24: msgstr "session key"
  25  
  26: msgid "session data"
  27: msgstr "session data"
  28  

  31  
  32: msgid "session"
  33: msgstr "session"
  34  
  35: msgid "sessions"
  36: msgstr "sessions"

myproject\Lib\site-packages\django\contrib\sessions\locale\en_GB\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24: msgstr "session key"
  25  
  26: msgid "session data"
  27: msgstr "session data"
  28  

  31  
  32: msgid "session"
  33: msgstr "session"
  34  
  35: msgid "sessions"
  36: msgstr "sessions"

myproject\Lib\site-packages\django\contrib\sessions\locale\eo\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Seancoj"
  23  
  24: msgid "session key"
  25  msgstr "seanco-ŝlosilo"
  26  
  27: msgid "session data"
  28  msgstr "seanco-datumo"

  32  
  33: msgid "session"
  34  msgstr "seanco"
  35  
  36: msgid "sessions"
  37  msgstr "seancoj"

myproject\Lib\site-packages\django\contrib\sessions\locale\es\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sesiones"
  23  
  24: msgid "session key"
  25  msgstr "clave de sesión"
  26  
  27: msgid "session data"
  28  msgstr "datos de sesión"

  32  
  33: msgid "session"
  34  msgstr "sesión"
  35  
  36: msgid "sessions"
  37  msgstr "sesiones"

myproject\Lib\site-packages\django\contrib\sessions\locale\es_AR\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sesiones"
  23  
  24: msgid "session key"
  25  msgstr "clave de sesión"
  26  
  27: msgid "session data"
  28  msgstr "datos de la sesión"

  32  
  33: msgid "session"
  34  msgstr "sesión"
  35  
  36: msgid "sessions"
  37  msgstr "sesiones"

myproject\Lib\site-packages\django\contrib\sessions\locale\es_CO\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Sesiones"
  22  
  23: msgid "session key"
  24  msgstr "clave de sesión"
  25  
  26: msgid "session data"
  27  msgstr "datos de sesión"

  31  
  32: msgid "session"
  33  msgstr "sesión"
  34  
  35: msgid "sessions"
  36  msgstr "sesiones"

myproject\Lib\site-packages\django\contrib\sessions\locale\es_MX\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sesiones"
  23  
  24: msgid "session key"
  25  msgstr "clave de sesión"
  26  
  27: msgid "session data"
  28  msgstr "datos de la sesión"

  32  
  33: msgid "session"
  34  msgstr "período de sesiones"
  35  
  36: msgid "sessions"
  37  msgstr "sesiones"

myproject\Lib\site-packages\django\contrib\sessions\locale\es_VE\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr ""
  24  
  25: msgid "session data"
  26  msgstr ""

  30  
  31: msgid "session"
  32  msgstr ""
  33  
  34: msgid "sessions"
  35  msgstr ""

myproject\Lib\site-packages\django\contrib\sessions\locale\et\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sessioonid"
  23  
  24: msgid "session key"
  25  msgstr "sessioonivõti"
  26  
  27: msgid "session data"
  28  msgstr "sessiooni andmed"

  32  
  33: msgid "session"
  34  msgstr "sessioon"
  35  
  36: msgid "sessions"
  37  msgstr "sessioonid"

myproject\Lib\site-packages\django\contrib\sessions\locale\eu\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Sesioak"
  22  
  23: msgid "session key"
  24  msgstr "sesioaren giltza"
  25  
  26: msgid "session data"
  27  msgstr "sesioaren datuak"

  31  
  32: msgid "session"
  33  msgstr "sesioa"
  34  
  35: msgid "sessions"
  36  msgstr "sesioak"

myproject\Lib\site-packages\django\contrib\sessions\locale\fa\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "نشست‌ها"
  23  
  24: msgid "session key"
  25  msgstr "کلید نشست"
  26  
  27: msgid "session data"
  28  msgstr "اطلاعات نشست"

  32  
  33: msgid "session"
  34  msgstr "نشست"
  35  
  36: msgid "sessions"
  37  msgstr "نشست‌ها"

myproject\Lib\site-packages\django\contrib\sessions\locale\fi\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Istunnot"
  23  
  24: msgid "session key"
  25  msgstr "istunnon avain"
  26  
  27: msgid "session data"
  28  msgstr "istunnon tiedot"

  32  
  33: msgid "session"
  34  msgstr "istunto"
  35  
  36: msgid "sessions"
  37  msgstr "istunnot"

myproject\Lib\site-packages\django\contrib\sessions\locale\fr\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21: msgstr "Sessions"
  22  
  23: msgid "session key"
  24: msgstr "clé de session"
  25  
  26: msgid "session data"
  27: msgstr "données de session"
  28  

  31  
  32: msgid "session"
  33: msgstr "session"
  34  
  35: msgid "sessions"
  36: msgstr "sessions"

myproject\Lib\site-packages\django\contrib\sessions\locale\fy\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr ""
  24  
  25: msgid "session data"
  26  msgstr ""

  30  
  31: msgid "session"
  32  msgstr ""
  33  
  34: msgid "sessions"
  35  msgstr ""

myproject\Lib\site-packages\django\contrib\sessions\locale\ga\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Seisiúin"
  23  
  24: msgid "session key"
  25  msgstr "eochair an seisiún"
  26  
  27: msgid "session data"
  28  msgstr "sonraíocht an seisiún"

  32  
  33: msgid "session"
  34  msgstr "seisiún"
  35  
  36: msgid "sessions"
  37  msgstr "seisúin"

myproject\Lib\site-packages\django\contrib\sessions\locale\gd\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Seiseanan"
  23  
  24: msgid "session key"
  25  msgstr "iuchair an t-seisein"
  26  
  27: msgid "session data"
  28  msgstr "dàta an t-seisein"

  32  
  33: msgid "session"
  34  msgstr "seisean"
  35  
  36: msgid "sessions"
  37  msgstr "seiseanan"

myproject\Lib\site-packages\django\contrib\sessions\locale\gl\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr ""
  23  
  24: msgid "session key"
  25  msgstr "chave da sesión"
  26  
  27: msgid "session data"
  28  msgstr "datos da sesión"

  32  
  33: msgid "session"
  34  msgstr "sesión"
  35  
  36: msgid "sessions"
  37  msgstr "sesións"

myproject\Lib\site-packages\django\contrib\sessions\locale\he\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "התחברויות"
  23  
  24: msgid "session key"
  25: msgstr "מפתח התחברות (session key)"
  26  
  27: msgid "session data"
  28: msgstr "מידע התחברות (session data)"
  29  

  32  
  33: msgid "session"
  34  msgstr "התחברות"
  35  
  36: msgid "sessions"
  37  msgstr "התחברויות"

myproject\Lib\site-packages\django\contrib\sessions\locale\hi\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "सत्र कुंजी"
  25  
  26: msgid "session data"
  27  msgstr "सत्र सामग्री"

  31  
  32: msgid "session"
  33  msgstr "सत्र"
  34  
  35: msgid "sessions"
  36  msgstr "सत्रें"

myproject\Lib\site-packages\django\contrib\sessions\locale\hr\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23: msgstr "Sessions"
  24  
  25: msgid "session key"
  26: msgstr "session ključ (key)"
  27  
  28: msgid "session data"
  29: msgstr "session podaci"
  30  

  33  
  34: msgid "session"
  35: msgstr "session"
  36  
  37: msgid "sessions"
  38: msgstr "sessions"

myproject\Lib\site-packages\django\contrib\sessions\locale\hsb\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Posedźenja"
  23  
  24: msgid "session key"
  25  msgstr "posedźenski kluč"
  26  
  27: msgid "session data"
  28  msgstr "posedźenske daty"

  32  
  33: msgid "session"
  34  msgstr "posedźenje"
  35  
  36: msgid "sessions"
  37  msgstr "posedźenja"

myproject\Lib\site-packages\django\contrib\sessions\locale\hu\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Munkamenetek"
  23  
  24: msgid "session key"
  25  msgstr "munkamenet kulcs"
  26  
  27: msgid "session data"
  28  msgstr "munkamenet adat"

  32  
  33: msgid "session"
  34  msgstr "munkamenet"
  35  
  36: msgid "sessions"
  37  msgstr "munkamenetek"

myproject\Lib\site-packages\django\contrib\sessions\locale\hy\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr "Սեսսիաներ"
  21  
  22: msgid "session key"
  23  msgstr "սեսսիայի բանալի"
  24  
  25: msgid "session data"
  26  msgstr "սեսսիայի տվյալներ"

  30  
  31: msgid "session"
  32  msgstr "սեսսիա"
  33  
  34: msgid "sessions"
  35  msgstr "սեսսիաներ"

myproject\Lib\site-packages\django\contrib\sessions\locale\ia\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21: msgstr "Sessiones"
  22  
  23: msgid "session key"
  24: msgstr "clave de session"
  25  
  26: msgid "session data"
  27: msgstr "datos de session"
  28  

  31  
  32: msgid "session"
  33: msgstr "session"
  34  
  35: msgid "sessions"
  36: msgstr "sessiones"

myproject\Lib\site-packages\django\contrib\sessions\locale\id\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Sesi"
  24  
  25: msgid "session key"
  26  msgstr "kunci sesi"
  27  
  28: msgid "session data"
  29  msgstr "data sesi"

  33  
  34: msgid "session"
  35  msgstr "sesi"
  36  
  37: msgid "sessions"
  38  msgstr "sesi"

myproject\Lib\site-packages\django\contrib\sessions\locale\io\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr "sesiono klefo"
  24  
  25: msgid "session data"
  26  msgstr "sesiono datumi"

  30  
  31: msgid "session"
  32  msgstr "sesiono"
  33  
  34: msgid "sessions"
  35  msgstr "sesioni"

myproject\Lib\site-packages\django\contrib\sessions\locale\is\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "setulykill"
  25  
  26: msgid "session data"
  27  msgstr "setugögn"

  31  
  32: msgid "session"
  33  msgstr "seta"
  34  
  35: msgid "sessions"
  36  msgstr "setur"

myproject\Lib\site-packages\django\contrib\sessions\locale\it\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22: msgstr "Sessioni"
  23  
  24: msgid "session key"
  25: msgstr "chiave di sessione"
  26  
  27: msgid "session data"
  28: msgstr "dati di sessione"
  29  

  32  
  33: msgid "session"
  34: msgstr "sessione"
  35  
  36: msgid "sessions"
  37: msgstr "sessioni"

myproject\Lib\site-packages\django\contrib\sessions\locale\ja\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "セッション"
  23  
  24: msgid "session key"
  25  msgstr "セッションキー"
  26  
  27: msgid "session data"
  28  msgstr "セッションデータ"

  32  
  33: msgid "session"
  34  msgstr "セッション"
  35  
  36: msgid "sessions"
  37  msgstr "セッション"

myproject\Lib\site-packages\django\contrib\sessions\locale\ka\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "სესიის გასაღები"
  25  
  26: msgid "session data"
  27  msgstr "სესიის მონაცემები"

  31  
  32: msgid "session"
  33  msgstr "სესია"
  34  
  35: msgid "sessions"
  36  msgstr "სესიები"

myproject\Lib\site-packages\django\contrib\sessions\locale\kab\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr "Tiɣimiyin"
  21  
  22: msgid "session key"
  23  msgstr "tasarutt n tɣimit"
  24  
  25: msgid "session data"
  26  msgstr "isefka n tɣimit"

  30  
  31: msgid "session"
  32  msgstr "tiɣimit"
  33  
  34: msgid "sessions"
  35  msgstr "tiɣimiyin"

myproject\Lib\site-packages\django\contrib\sessions\locale\kk\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Сессиялар"
  23  
  24: msgid "session key"
  25  msgstr "сессия кілті"
  26  
  27: msgid "session data"
  28  msgstr "сессия деректері"

  32  
  33: msgid "session"
  34  msgstr "сессия"
  35  
  36: msgid "sessions"
  37  msgstr "сессиялар"

myproject\Lib\site-packages\django\contrib\sessions\locale\km\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr "លេខសំគាល់​រយះពេល​ពិនិត្យ​ចូល"
  24  
  25: msgid "session data"
  26  msgstr "ទិន្នន័យរយះពេល​ពិនិត្យ​ចូល"

  30  
  31: msgid "session"
  32  msgstr "រយះពេល​ពិនិត្យ​ចូល"
  33  
  34: msgid "sessions"
  35  msgstr "រយះពេល​ពិនិត្យ​ចូល"

myproject\Lib\site-packages\django\contrib\sessions\locale\kn\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "ಅಧಿವೇಶನಗಳು"
  23  
  24: msgid "session key"
  25  msgstr "ಅಧಿವೇಶನದ ಕೀಲಿಕೈ"
  26  
  27: msgid "session data"
  28  msgstr "ಅಧಿವೇಶನದ ದತ್ತಾಂಶ"

  32  
  33: msgid "session"
  34  msgstr "ಅಧಿವೇಶನ"
  35  
  36: msgid "sessions"
  37  msgstr "ಅಧಿವೇಶನಗಳು"

myproject\Lib\site-packages\django\contrib\sessions\locale\ko\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "세션"
  22  
  23: msgid "session key"
  24  msgstr "세션 키"
  25  
  26: msgid "session data"
  27  msgstr "세션 날짜"

  31  
  32: msgid "session"
  33  msgstr "세션"
  34  
  35: msgid "sessions"
  36  msgstr "세션"

myproject\Lib\site-packages\django\contrib\sessions\locale\ky\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr "Отурумдар"
  21  
  22: msgid "session key"
  23  msgstr "отурум ачкычы"
  24  
  25: msgid "session data"
  26  msgstr "отурум берилиши"

  30  
  31: msgid "session"
  32  msgstr "отурум"
  33  
  34: msgid "sessions"
  35  msgstr "отурумдар"

myproject\Lib\site-packages\django\contrib\sessions\locale\lb\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr ""
  24  
  25: msgid "session data"
  26  msgstr ""

  30  
  31: msgid "session"
  32  msgstr ""
  33  
  34: msgid "sessions"
  35  msgstr ""

myproject\Lib\site-packages\django\contrib\sessions\locale\lt\LC_MESSAGES\django.po:
  22  
  23: msgid "Sessions"
  24  msgstr "Sesijos"
  25  
  26: msgid "session key"
  27  msgstr "sesijos raktas"
  28  
  29: msgid "session data"
  30  msgstr "sesijos data"

  34  
  35: msgid "session"
  36  msgstr "sesija"
  37  
  38: msgid "sessions"
  39  msgstr "sesijos"

myproject\Lib\site-packages\django\contrib\sessions\locale\lv\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Sesijas"
  24  
  25: msgid "session key"
  26  msgstr "sesijas atslēga"
  27  
  28: msgid "session data"
  29  msgstr "sesijas dati"

  33  
  34: msgid "session"
  35  msgstr "sesija"
  36  
  37: msgid "sessions"
  38  msgstr "sesijas"

myproject\Lib\site-packages\django\contrib\sessions\locale\mk\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Сесии"
  23  
  24: msgid "session key"
  25  msgstr "сесиски клуч"
  26  
  27: msgid "session data"
  28  msgstr "сесиски податоци"

  32  
  33: msgid "session"
  34  msgstr "сесија"
  35  
  36: msgid "sessions"
  37  msgstr "сесии"

myproject\Lib\site-packages\django\contrib\sessions\locale\ml\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "സെഷനുകൾ"
  23  
  24: msgid "session key"
  25  msgstr "സെഷന്‍ കീ"
  26  
  27: msgid "session data"
  28  msgstr "സെഷനിലെ ഡാറ്റ"

  32  
  33: msgid "session"
  34  msgstr "സെഷന്‍"
  35  
  36: msgid "sessions"
  37  msgstr "സെഷനുകള്‍"

myproject\Lib\site-packages\django\contrib\sessions\locale\mn\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23: msgstr "Session-ууд"
  24  
  25: msgid "session key"
  26: msgstr "session түлхүүр"
  27  
  28: msgid "session data"
  29: msgstr "session өгөгдөл"
  30  

  33  
  34: msgid "session"
  35: msgstr "session"
  36  
  37: msgid "sessions"
  38: msgstr "session-ууд"

myproject\Lib\site-packages\django\contrib\sessions\locale\mr\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr ""
  24  
  25: msgid "session data"
  26  msgstr ""

  30  
  31: msgid "session"
  32  msgstr ""
  33  
  34: msgid "sessions"
  35  msgstr ""

myproject\Lib\site-packages\django\contrib\sessions\locale\ms\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr "Sesi-sesi"
  21  
  22: msgid "session key"
  23  msgstr "Kunci sesi"
  24  
  25: msgid "session data"
  26  msgstr "Data sesi"

  30  
  31: msgid "session"
  32  msgstr "sesi"
  33  
  34: msgid "sessions"
  35  msgstr "sesi-sesi"

myproject\Lib\site-packages\django\contrib\sessions\locale\my\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "ကြားကာလများ"
  22  
  23: msgid "session key"
  24  msgstr "ကြားကာလသော့"
  25  
  26: msgid "session data"
  27  msgstr "ကြားကာလအချက်အလက်"

  31  
  32: msgid "session"
  33  msgstr "ကြားကာလ"
  34  
  35: msgid "sessions"
  36  msgstr "ကြားကာလများ"

myproject\Lib\site-packages\django\contrib\sessions\locale\nb\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Økter"
  24  
  25: msgid "session key"
  26  msgstr "øktnøkkel"
  27  
  28: msgid "session data"
  29  msgstr "øktdata"

  33  
  34: msgid "session"
  35  msgstr "økt"
  36  
  37: msgid "sessions"
  38  msgstr "økter"

myproject\Lib\site-packages\django\contrib\sessions\locale\ne\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "अवधिहरु"
  22  
  23: msgid "session key"
  24  msgstr "अवधि साँचो"
  25  
  26: msgid "session data"
  27  msgstr "अवधि विवरण"

  31  
  32: msgid "session"
  33  msgstr "अवधि"
  34  
  35: msgid "sessions"
  36  msgstr "अवधिहरु"

myproject\Lib\site-packages\django\contrib\sessions\locale\nl\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Sessies"
  22  
  23: msgid "session key"
  24  msgstr "sessiesleutel"
  25  
  26: msgid "session data"
  27  msgstr "sessiegegevens"

  31  
  32: msgid "session"
  33  msgstr "sessie"
  34  
  35: msgid "sessions"
  36  msgstr "sessies"

myproject\Lib\site-packages\django\contrib\sessions\locale\nn\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sesjonar"
  23  
  24: msgid "session key"
  25  msgstr "sesjonsnøkkel"
  26  
  27: msgid "session data"
  28  msgstr "sesjonsdata"

  32  
  33: msgid "session"
  34  msgstr "sesjon"
  35  
  36: msgid "sessions"
  37  msgstr "sesjonar"

myproject\Lib\site-packages\django\contrib\sessions\locale\os\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "сессийы амонӕн"
  25  
  26: msgid "session data"
  27  msgstr "сессийы рардтӕ"

  31  
  32: msgid "session"
  33  msgstr "сесси"
  34  
  35: msgid "sessions"
  36  msgstr "сесситӕ"

myproject\Lib\site-packages\django\contrib\sessions\locale\pa\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "ਸ਼ੈਸ਼ਨ ਕੁੰਜੀ"
  25  
  26: msgid "session data"
  27  msgstr "ਸ਼ੈਸ਼ਨ ਡਾਟਾ"

  31  
  32: msgid "session"
  33  msgstr "ਸ਼ੈਸ਼ਨ"
  34  
  35: msgid "sessions"
  36  msgstr "ਸ਼ੈਸ਼ਨ"

myproject\Lib\site-packages\django\contrib\sessions\locale\pl\LC_MESSAGES\django.po:
  22  
  23: msgid "Sessions"
  24  msgstr "Sesje"
  25  
  26: msgid "session key"
  27  msgstr "klucz sesji"
  28  
  29: msgid "session data"
  30  msgstr "dane sesji"

  34  
  35: msgid "session"
  36  msgstr "sesja"
  37  
  38: msgid "sessions"
  39  msgstr "sesje"

myproject\Lib\site-packages\django\contrib\sessions\locale\pt\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sessões"
  23  
  24: msgid "session key"
  25  msgstr "chave da sessão"
  26  
  27: msgid "session data"
  28  msgstr "dados da sessão"

  32  
  33: msgid "session"
  34  msgstr "sessão"
  35  
  36: msgid "sessions"
  37  msgstr "sessões"

myproject\Lib\site-packages\django\contrib\sessions\locale\pt_BR\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Sessões"
  23  
  24: msgid "session key"
  25  msgstr "chave da sessão"
  26  
  27: msgid "session data"
  28  msgstr "dados da sessão"

  32  
  33: msgid "session"
  34  msgstr "sessão"
  35  
  36: msgid "sessions"
  37  msgstr "sessões"

myproject\Lib\site-packages\django\contrib\sessions\locale\ro\LC_MESSAGES\django.po:
  22  
  23: msgid "Sessions"
  24  msgstr "Sesiuni"
  25  
  26: msgid "session key"
  27  msgstr "cheie sesiune"
  28  
  29: msgid "session data"
  30  msgstr "date sesiune"

  34  
  35: msgid "session"
  36  msgstr "sesiune"
  37  
  38: msgid "sessions"
  39  msgstr "sesiuni"

myproject\Lib\site-packages\django\contrib\sessions\locale\ru\LC_MESSAGES\django.po:
  22  
  23: msgid "Sessions"
  24  msgstr "Сессии"
  25  
  26: msgid "session key"
  27  msgstr "ключ сессии"
  28  
  29: msgid "session data"
  30  msgstr "данные сессии"

  34  
  35: msgid "session"
  36  msgstr "сессия"
  37  
  38: msgid "sessions"
  39  msgstr "сессии"

myproject\Lib\site-packages\django\contrib\sessions\locale\sk\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Relácie"
  23  
  24: msgid "session key"
  25  msgstr "kľúč relácie"
  26  
  27: msgid "session data"
  28  msgstr "údaje relácie"

  32  
  33: msgid "session"
  34  msgstr "relácia"
  35  
  36: msgid "sessions"
  37  msgstr "relácie"

myproject\Lib\site-packages\django\contrib\sessions\locale\sl\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Seje"
  24  
  25: msgid "session key"
  26  msgstr "ključ seje"
  27  
  28: msgid "session data"
  29  msgstr "podatki seje"

  33  
  34: msgid "session"
  35  msgstr "seja"
  36  
  37: msgid "sessions"
  38  msgstr "seje"

myproject\Lib\site-packages\django\contrib\sessions\locale\sq\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Sesione"
  22  
  23: msgid "session key"
  24  msgstr "kyç sesioni"
  25  
  26: msgid "session data"
  27  msgstr "të dhëna sesioni"

  31  
  32: msgid "session"
  33  msgstr "sesion"
  34  
  35: msgid "sessions"
  36  msgstr "sesione"

myproject\Lib\site-packages\django\contrib\sessions\locale\sr\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Сесије"
  24  
  25: msgid "session key"
  26  msgstr "кључ сесије"
  27  
  28: msgid "session data"
  29  msgstr "подаци сесије"

  33  
  34: msgid "session"
  35  msgstr "сесија"
  36  
  37: msgid "sessions"
  38  msgstr "сесије"

myproject\Lib\site-packages\django\contrib\sessions\locale\sr_Latn\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr "Sesije"
  24  
  25: msgid "session key"
  26  msgstr "ključ sesije"
  27  
  28: msgid "session data"
  29  msgstr "podaci sesije"

  33  
  34: msgid "session"
  35  msgstr "sesija"
  36  
  37: msgid "sessions"
  38  msgstr "sesije"

myproject\Lib\site-packages\django\contrib\sessions\locale\sv\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22: msgstr "Sessioner"
  23  
  24: msgid "session key"
  25: msgstr "sessionsnyckel"
  26  
  27: msgid "session data"
  28: msgstr "sessionsdata"
  29  

  32  
  33: msgid "session"
  34: msgstr "session"
  35  
  36: msgid "sessions"
  37: msgstr "sessioner"

myproject\Lib\site-packages\django\contrib\sessions\locale\sw\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Vipindi"
  22  
  23: msgid "session key"
  24  msgstr "ufunguo wa kipindi"
  25  
  26: msgid "session data"
  27  msgstr "data za kipindi"

  31  
  32: msgid "session"
  33  msgstr "kipindi"
  34  
  35: msgid "sessions"
  36  msgstr "vipindi"

myproject\Lib\site-packages\django\contrib\sessions\locale\ta\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr "அமர்வு குறியீ"
  24  
  25: msgid "session data"
  26  msgstr "அமர்வு தகவல்"

  30  
  31: msgid "session"
  32  msgstr "அமர்வு"
  33  
  34: msgid "sessions"
  35  msgstr "அமர்வுகள்"

myproject\Lib\site-packages\django\contrib\sessions\locale\te\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr ""
  22  
  23: msgid "session key"
  24  msgstr "భాగము తాళంచెవి"
  25  
  26: msgid "session data"
  27  msgstr "భాగము దత్తం"

  31  
  32: msgid "session"
  33  msgstr "భాగము"
  34  
  35: msgid "sessions"
  36  msgstr "భాగములు"

myproject\Lib\site-packages\django\contrib\sessions\locale\tg\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr "Сессияҳо"
  21  
  22: msgid "session key"
  23  msgstr "калиди сессияҳо"
  24  
  25: msgid "session data"
  26  msgstr "додаҳои сессияҳо"

  30  
  31: msgid "session"
  32  msgstr "сессия"
  33  
  34: msgid "sessions"
  35  msgstr "сессияҳо"

myproject\Lib\site-packages\django\contrib\sessions\locale\th\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "เซสชัน"
  22  
  23: msgid "session key"
  24  msgstr "เซสชันคีย์"
  25  
  26: msgid "session data"
  27  msgstr "ข้อมูลเซสชัน"

  31  
  32: msgid "session"
  33  msgstr "เซสชัน"
  34  
  35: msgid "sessions"
  36  msgstr "เซสชัน"

myproject\Lib\site-packages\django\contrib\sessions\locale\tk\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Sessiýalar"
  22  
  23: msgid "session key"
  24  msgstr "sessiýa açary"
  25  
  26: msgid "session data"
  27  msgstr "sessiýa maglumaty"

  31  
  32: msgid "session"
  33  msgstr "sessiýa"
  34  
  35: msgid "sessions"
  36  msgstr "sessiýalar"

myproject\Lib\site-packages\django\contrib\sessions\locale\tr\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "Oturumlar"
  23  
  24: msgid "session key"
  25  msgstr "oturum anahtarı"
  26  
  27: msgid "session data"
  28  msgstr "oturum verisi"

  32  
  33: msgid "session"
  34  msgstr "oturum"
  35  
  36: msgid "sessions"
  37  msgstr "oturumlar"

myproject\Lib\site-packages\django\contrib\sessions\locale\tt\LC_MESSAGES\django.po:
  19  
  20: msgid "Sessions"
  21  msgstr "Эш сеанслары"
  22  
  23: msgid "session key"
  24  msgstr "эш сеансы ачкычы"
  25  
  26: msgid "session data"
  27  msgstr "эш сеансы бирелмәләре"

  31  
  32: msgid "session"
  33  msgstr "эш сеансы"
  34  
  35: msgid "sessions"
  36  msgstr "эш сеанслары"

myproject\Lib\site-packages\django\contrib\sessions\locale\udm\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr ""
  24  
  25: msgid "session data"
  26  msgstr ""

  30  
  31: msgid "session"
  32  msgstr ""
  33  
  34: msgid "sessions"
  35  msgstr ""

myproject\Lib\site-packages\django\contrib\sessions\locale\uk\LC_MESSAGES\django.po:
  23  
  24: msgid "Sessions"
  25  msgstr "Сесії"
  26  
  27: msgid "session key"
  28  msgstr "ключ сесії"
  29  
  30: msgid "session data"
  31  msgstr "дані сесії"

  35  
  36: msgid "session"
  37  msgstr "сесія"
  38  
  39: msgid "sessions"
  40  msgstr "сесії"

myproject\Lib\site-packages\django\contrib\sessions\locale\ur\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr ""
  21  
  22: msgid "session key"
  23  msgstr "کلید نشست"
  24  
  25: msgid "session data"
  26  msgstr "نشست کا ڈیٹا"

  30  
  31: msgid "session"
  32  msgstr "نشست"
  33  
  34: msgid "sessions"
  35  msgstr "نشستیں"

myproject\Lib\site-packages\django\contrib\sessions\locale\uz\LC_MESSAGES\django.po:
  18  
  19: msgid "Sessions"
  20  msgstr "Sessiyalar"
  21  
  22: msgid "session key"
  23  msgstr "sessiya kaliti"
  24  
  25: msgid "session data"
  26  msgstr "sessiya ma'lumotlari "

  30  
  31: msgid "session"
  32  msgstr "sessiya"
  33  
  34: msgid "sessions"
  35  msgstr "sessiyalar"

myproject\Lib\site-packages\django\contrib\sessions\locale\vi\LC_MESSAGES\django.po:
  21  
  22: msgid "Sessions"
  23  msgstr ""
  24  
  25: msgid "session key"
  26: msgstr "session key"
  27  
  28: msgid "session data"
  29: msgstr "session data"
  30  

  33  
  34: msgid "session"
  35  msgstr "Phiên"
  36  
  37: msgid "sessions"
  38: msgstr "session"

myproject\Lib\site-packages\django\contrib\sessions\locale\zh_Hans\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22  msgstr "会话"
  23  
  24: msgid "session key"
  25  msgstr "会话密钥"
  26  
  27: msgid "session data"
  28  msgstr "会话数据"

  32  
  33: msgid "session"
  34  msgstr "会话"
  35  
  36: msgid "sessions"
  37  msgstr "会话"

myproject\Lib\site-packages\django\contrib\sessions\locale\zh_Hant\LC_MESSAGES\django.po:
  20  
  21: msgid "Sessions"
  22: msgstr "Sessions"
  23  
  24: msgid "session key"
  25: msgstr "session 鍵值"
  26  
  27: msgid "session data"
  28: msgstr "session 資料"
  29  

  32  
  33: msgid "session"
  34: msgstr "session"
  35  
  36: msgid "sessions"
  37: msgstr "sessions"

myproject\Lib\site-packages\django\contrib\sessions\management\commands\clearsessions.py:
   8      help = (
   9:         "Can be run as a cronjob or directly to clean out expired sessions "
  10          "when the backend supports it."

  13      def handle(self, **options):
  14:         engine = import_module(settings.SESSION_ENGINE)
  15          try:
  16:             engine.SessionStore.clear_expired()
  17          except NotImplementedError:
  18              raise CommandError(
  19:                 "Session engine '%s' doesn't support clearing expired "
  20:                 "sessions." % settings.SESSION_ENGINE
  21              )

myproject\Lib\site-packages\django\contrib\sessions\migrations\0001_initial.py:
   1: import django.contrib.sessions.models
   2  from django.db import migrations, models

   9          migrations.CreateModel(
  10:             name="Session",
  11              fields=[
  12                  (
  13:                     "session_key",
  14                      models.CharField(

  16                          serialize=False,
  17:                         verbose_name="session key",
  18                          primary_key=True,

  20                  ),
  21:                 ("session_data", models.TextField(verbose_name="session data")),
  22                  (

  28                  "abstract": False,
  29:                 "db_table": "django_session",
  30:                 "verbose_name": "session",
  31:                 "verbose_name_plural": "sessions",
  32              },
  33              managers=[
  34:                 ("objects", django.contrib.sessions.models.SessionManager()),
  35              ],

myproject\Lib\site-packages\django\core\checks\__init__.py:
  24  import django.core.checks.security.csrf  # NOQA isort:skip
  25: import django.core.checks.security.sessions  # NOQA isort:skip
  26  import django.core.checks.templates  # NOQA isort:skip

myproject\Lib\site-packages\django\core\checks\security\csrf.py:
  37      passed_check = (
  38:         settings.CSRF_USE_SESSIONS
  39          or not _csrf_middleware()

myproject\Lib\site-packages\django\core\checks\security\sessions.py:
   5  
   6: def add_session_cookie_message(message):
   7      return message + (
   8:         " Using a secure-only session cookie makes it more difficult for "
   9:         "network traffic sniffers to hijack user sessions."
  10      )

  13  W010 = Warning(
  14:     add_session_cookie_message(
  15:         "You have 'django.contrib.sessions' in your INSTALLED_APPS, "
  16:         "but you have not set SESSION_COOKIE_SECURE to True."
  17      ),

  21  W011 = Warning(
  22:     add_session_cookie_message(
  23:         "You have 'django.contrib.sessions.middleware.SessionMiddleware' "
  24          "in your MIDDLEWARE, but you have not set "
  25:         "SESSION_COOKIE_SECURE to True."
  26      ),

  30  W012 = Warning(
  31:     add_session_cookie_message("SESSION_COOKIE_SECURE is not set to True."),
  32      id="security.W012",

  37      return message + (
  38:         " Using an HttpOnly session cookie makes it more difficult for "
  39:         "cross-site scripting attacks to hijack user sessions."
  40      )

  44      add_httponly_message(
  45:         "You have 'django.contrib.sessions' in your INSTALLED_APPS, "
  46:         "but you have not set SESSION_COOKIE_HTTPONLY to True.",
  47      ),

  52      add_httponly_message(
  53:         "You have 'django.contrib.sessions.middleware.SessionMiddleware' "
  54          "in your MIDDLEWARE, but you have not set "
  55:         "SESSION_COOKIE_HTTPONLY to True."
  56      ),

  60  W015 = Warning(
  61:     add_httponly_message("SESSION_COOKIE_HTTPONLY is not set to True."),
  62      id="security.W015",

  66  @register(Tags.security, deploy=True)
  67: def check_session_cookie_secure(app_configs, **kwargs):
  68:     if settings.SESSION_COOKIE_SECURE is True:
  69          return []
  70      errors = []
  71:     if _session_app():
  72          errors.append(W010)
  73:     if _session_middleware():
  74          errors.append(W011)

  80  @register(Tags.security, deploy=True)
  81: def check_session_cookie_httponly(app_configs, **kwargs):
  82:     if settings.SESSION_COOKIE_HTTPONLY is True:
  83          return []
  84      errors = []
  85:     if _session_app():
  86          errors.append(W013)
  87:     if _session_middleware():
  88          errors.append(W014)

  93  
  94: def _session_middleware():
  95:     return "django.contrib.sessions.middleware.SessionMiddleware" in settings.MIDDLEWARE
  96  
  97  
  98: def _session_app():
  99:     return "django.contrib.sessions" in settings.INSTALLED_APPS

myproject\Lib\site-packages\django\core\mail\backends\locmem.py:
  10      """
  11:     An email backend for use during test sessions.
  12  

myproject\Lib\site-packages\django\core\management\color.py:
  54          # Windows Terminal supports VT codes.
  55:         "WT_SESSION" in os.environ
  56          or

myproject\Lib\site-packages\django\db\backends\mysql\base.py:
  267              assignments.append(
  268:                 "SET SESSION TRANSACTION ISOLATION LEVEL %s"
  269                  % self.isolation_level.upper()

myproject\Lib\site-packages\django\db\backends\oracle\base.py:
  266          # to happen.
  267:         cursor.execute("ALTER SESSION SET NLS_TERRITORY = 'AMERICA'")
  268          # Set Oracle date to ANSI date format.  This only needs to execute

  272          cursor.execute(
  273:             "ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS'"
  274              " NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF'"

myproject\Lib\site-packages\django\db\backends\oracle\creation.py:
  271              """,
  272:             """GRANT CREATE SESSION,
  273                       CREATE TABLE,

myproject\Lib\site-packages\django\db\backends\postgresql\base.py:
  229              if self.isolation_level != connection.isolation_level:
  230:                 connection.set_session(isolation_level=self.isolation_level)
  231          # Register dummy loads() to avoid a round trip from psycopg2's decode

myproject\Lib\site-packages\django\middleware\csrf.py:
   46  CSRF_ALLOWED_CHARS = string.ascii_letters + string.digits
   47: CSRF_SESSION_KEY = "_csrftoken"
   48  

  231  
  232:         If the CSRF_USE_SESSIONS setting is false, raises InvalidTokenFormat if
  233          the request's secret has invalid characters or an invalid length.
  234          """
  235:         if settings.CSRF_USE_SESSIONS:
  236              try:
  237:                 csrf_secret = request.session.get(CSRF_SESSION_KEY)
  238              except AttributeError:
  239                  raise ImproperlyConfigured(
  240:                     "CSRF_USE_SESSIONS is enabled, but request.session is not "
  241:                     "set. SessionMiddleware must appear before CsrfViewMiddleware "
  242                      "in MIDDLEWARE."

  259      def _set_csrf_cookie(self, request, response):
  260:         if settings.CSRF_USE_SESSIONS:
  261:             if request.session.get(CSRF_SESSION_KEY) != request.META["CSRF_COOKIE"]:
  262:                 request.session[CSRF_SESSION_KEY] = request.META["CSRF_COOKIE"]
  263          else:

  327          good_referer = (
  328:             settings.SESSION_COOKIE_DOMAIN
  329:             if settings.CSRF_USE_SESSIONS
  330              else settings.CSRF_COOKIE_DOMAIN

  456              # The attacker will need to provide a CSRF cookie and token, but
  457:             # that's no problem for a MITM and the session-independent secret
  458              # we're using. So the MITM can circumvent the CSRF protection. This

myproject\Lib\site-packages\django\test\client.py:
  665      @property
  666:     def session(self):
  667:         """Return the current session variables."""
  668:         engine = import_module(settings.SESSION_ENGINE)
  669:         cookie = self.cookies.get(settings.SESSION_COOKIE_NAME)
  670          if cookie:
  671:             return engine.SessionStore(cookie.value)
  672:         session = engine.SessionStore()
  673:         session.save()
  674:         self.cookies[settings.SESSION_COOKIE_NAME] = session.session_key
  675:         return session
  676  

  710          request = HttpRequest()
  711:         if self.session:
  712:             request.session = self.session
  713          else:
  714:             engine = import_module(settings.SESSION_ENGINE)
  715:             request.session = engine.SessionStore()
  716          login(request, user, backend)
  717:         # Save the session values.
  718:         request.session.save()
  719:         # Set the cookie to represent the session.
  720:         session_cookie = settings.SESSION_COOKIE_NAME
  721:         self.cookies[session_cookie] = request.session.session_key
  722          cookie_data = {

  724              "path": "/",
  725:             "domain": settings.SESSION_COOKIE_DOMAIN,
  726:             "secure": settings.SESSION_COOKIE_SECURE or None,
  727              "expires": None,
  728          }
  729:         self.cookies[session_cookie].update(cookie_data)
  730  
  731      def logout(self):
  732:         """Log out the user by removing the cookies and session object."""
  733          from django.contrib.auth import get_user, logout

  735          request = HttpRequest()
  736:         if self.session:
  737:             request.session = self.session
  738              request.user = get_user(request)
  739          else:
  740:             engine = import_module(settings.SESSION_ENGINE)
  741:             request.session = engine.SessionStore()
  742          logout(request)

  768      Client objects are stateful - they will retain cookie (and
  769:     thus session) details for the lifetime of the Client instance.
  770  

myproject\Lib\site-packages\django\test\runner.py:
  102      """
  103:     Custom result class that triggers a PDB session when an error or failure
  104      occurs.

myproject\Lib\site-packages\django\views\i18n.py:
  21      """
  22:     Redirect to a given URL while setting the chosen language in the session
  23      (if enabled) and in a cookie. The URL and the language code need to be

myproject\Lib\site-packages\Django-4.1.7.dist-info\RECORD:
  2736  django/contrib/messages/storage/__pycache__/fallback.cpython-311.pyc,,
  2737: django/contrib/messages/storage/__pycache__/session.cpython-311.pyc,,
  2738  django/contrib/messages/storage/base.py,sha256=sVkSITZRsdYDvyaS5tqjcw8-fylvcbZpR4ctlpWI5bM,5820

  2740  django/contrib/messages/storage/fallback.py,sha256=K5CrVJfUDakMjIcqSRt1WZd_1Xco1Bc2AQM3O3ld9aA,2093
  2741: django/contrib/messages/storage/session.py,sha256=kvdVosbBAvI3XBA0G4AFKf0vxLleyzlwbGEgl60DfMQ,1764
  2742  django/contrib/messages/utils.py,sha256=_oItQILchdwdXH08SIyZ-DBdYi7q_uobHQajWwmAeUw,256

  3143  django/contrib/redirects/models.py,sha256=KJ6mj0BS243BNPKp26K7OSqcT9j49FPth5m0gNWWxFM,1083
  3144: django/contrib/sessions/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  3145: django/contrib/sessions/__pycache__/__init__.cpython-311.pyc,,
  3146: django/contrib/sessions/__pycache__/apps.cpython-311.pyc,,
  3147: django/contrib/sessions/__pycache__/base_session.cpython-311.pyc,,
  3148: django/contrib/sessions/__pycache__/exceptions.cpython-311.pyc,,
  3149: django/contrib/sessions/__pycache__/middleware.cpython-311.pyc,,
  3150: django/contrib/sessions/__pycache__/models.cpython-311.pyc,,
  3151: django/contrib/sessions/__pycache__/serializers.cpython-311.pyc,,
  3152: django/contrib/sessions/apps.py,sha256=5WIMqa3ymqEvYMnFHe3uWZB8XSijUF_NSgaorRD50Lg,194
  3153: django/contrib/sessions/backends/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  3154: django/contrib/sessions/backends/__pycache__/__init__.cpython-311.pyc,,
  3155: django/contrib/sessions/backends/__pycache__/base.cpython-311.pyc,,
  3156: django/contrib/sessions/backends/__pycache__/cache.cpython-311.pyc,,
  3157: django/contrib/sessions/backends/__pycache__/cached_db.cpython-311.pyc,,
  3158: django/contrib/sessions/backends/__pycache__/db.cpython-311.pyc,,
  3159: django/contrib/sessions/backends/__pycache__/file.cpython-311.pyc,,
  3160: django/contrib/sessions/backends/__pycache__/signed_cookies.cpython-311.pyc,,
  3161: django/contrib/sessions/backends/base.py,sha256=xm9Rs0ZI8ERP6cZ-N4KdfVww3aWiXC8FcgcxQWNdrqw,11744
  3162: django/contrib/sessions/backends/cache.py,sha256=Dz4lOirEI3ZSrvOWnAffQpyA53TuPm3MmV1u8jkT-hI,2741
  3163: django/contrib/sessions/backends/cached_db.py,sha256=pxPlY9klOH0NCht8OZrHQew_UkMrQlKMtIKMLYIv2DI,2098
  3164: django/contrib/sessions/backends/db.py,sha256=qEYZNmyWk1pBbuXGXbTsLtQ2Xt_HgoRALxTQm55ZLy0,3785
  3165: django/contrib/sessions/backends/file.py,sha256=4o1LB0hZz_SCQjAwXHulDnFB1QZrEprAY4LKQdGfkRc,7754
  3166: django/contrib/sessions/backends/signed_cookies.py,sha256=keRgy5CyvufiEo4A91znOKbX6UOzzH2hzaw51UzK_0Y,2676
  3167: django/contrib/sessions/base_session.py,sha256=1woSGGF4IFWm2apOabxtdQHeVS6OmnivL_fwjUYGJwc,1490
  3168: django/contrib/sessions/exceptions.py,sha256=KhkhXiFwfUflSP_t6wCLOEXz1YjBRTKVNbrLmGhOTLo,359
  3169: django/contrib/sessions/locale/af/LC_MESSAGES/django.mo,sha256=0DS0pgVrMN-bUimDfesgHs8Lgr0loz2c6nJdz58RxyQ,717
  3170: django/contrib/sessions/locale/af/LC_MESSAGES/django.po,sha256=ZJRLBshQCAiTTAUycdB3MZIadLeHR5LxbSlDvSWLnEo,838
  3171: django/contrib/sessions/locale/ar/LC_MESSAGES/django.mo,sha256=yoepqaR68PTGLx--cAOzP94Sqyl5xIYpeQ0IFWgY380,846
  3172: django/contrib/sessions/locale/ar/LC_MESSAGES/django.po,sha256=ZgwtBYIdtnqp_8nKHXF1NVJFzQU81-3yv9b7STrQHMc,995
  3173: django/contrib/sessions/locale/ar_DZ/LC_MESSAGES/django.mo,sha256=_iSasR22CxvNWfei6aE_24woPhhhvNzQl5FUO_649dc,817
  3174: django/contrib/sessions/locale/ar_DZ/LC_MESSAGES/django.po,sha256=vop5scstamgFSnO_FWXCEnI7R1N26t7jy_mZUAfETcY,978
  3175: django/contrib/sessions/locale/ast/LC_MESSAGES/django.mo,sha256=hz2m-PkrHby2CKfIOARj6kCzisT-Vs0syfDSTx_iVVw,702
  3176: django/contrib/sessions/locale/ast/LC_MESSAGES/django.po,sha256=M90j1Nx6oDJ16hguUkfKYlyb5OymUeZ5xzPixWxSC7I,846
  3177: django/contrib/sessions/locale/az/LC_MESSAGES/django.mo,sha256=_4XcYdtRasbCjRoaWGoULsXX2cEa--KdRdqbnGoaRuM,731
  3178: django/contrib/sessions/locale/az/LC_MESSAGES/django.po,sha256=qYd7vz6A-hHQNwewzI6wEsxRVLdoc2xLGm1RPW0Hxc4,891
  3179: django/contrib/sessions/locale/be/LC_MESSAGES/django.mo,sha256=FHZ72QuOd-vAOjOXisLs4CaEk7uZuzjO_EfUSB6754M,854
  3180: django/contrib/sessions/locale/be/LC_MESSAGES/django.po,sha256=tHsYVn3XNTcukB0SrHUWP1iV763rrQHCimOyJHRPiek,1023
  3181: django/contrib/sessions/locale/bg/LC_MESSAGES/django.mo,sha256=fFZ8EgRlJ1Z-IP8gPtsUXAnqVHbqQRZpYv6PLWNlNVA,759
  3182: django/contrib/sessions/locale/bg/LC_MESSAGES/django.po,sha256=tXcaDPNmFIv0RU-7sGscRkLCbKEgTBowzVj3AYymarY,997
  3183: django/contrib/sessions/locale/bn/LC_MESSAGES/django.mo,sha256=0BdFN7ou9tmoVG00fCA-frb1Tri3iKz43W7SWal398s,762
  3184: django/contrib/sessions/locale/bn/LC_MESSAGES/django.po,sha256=LycmTel6LXV2HGGN6qzlAfID-cVEQCNnW1Nv_hbWXJk,909
  3185: django/contrib/sessions/locale/br/LC_MESSAGES/django.mo,sha256=6ubPQUyXX08KUssyVZBMMkTlD94mlA6wzsteAMiZ8C8,1027
  3186: django/contrib/sessions/locale/br/LC_MESSAGES/django.po,sha256=LKxGGHOQejKpUp18rCU2FXW8D_H3WuP_P6dPlEluwcE,1201
  3187: django/contrib/sessions/locale/bs/LC_MESSAGES/django.mo,sha256=M7TvlJMrSUAFhp7oUSpUKejnbTuIK-19yiGBBECl9Sc,759
  3188: django/contrib/sessions/locale/bs/LC_MESSAGES/django.po,sha256=Ur0AeRjXUsLgDJhcGiw75hRk4Qe98DzPBOocD7GFDRQ,909
  3189: django/contrib/sessions/locale/ca/LC_MESSAGES/django.mo,sha256=tbaZ48PaihGGD9-2oTKiMFY3kbXjU59nNciCRINOBNk,738
  3190: django/contrib/sessions/locale/ca/LC_MESSAGES/django.po,sha256=tJuJdehKuD9aXOauWOkE5idQhsVsLbeg1Usmc6N_SP0,906
  3191: django/contrib/sessions/locale/cs/LC_MESSAGES/django.mo,sha256=wEFP4NNaRQDbcbw96UC906jN4rOrlPJMn60VloXr944,759
  3192: django/contrib/sessions/locale/cs/LC_MESSAGES/django.po,sha256=7XkKESwfOmbDRDbUYr1f62-fDOuyI-aCqLGaEiDrmX8,962
  3193: django/contrib/sessions/locale/cy/LC_MESSAGES/django.mo,sha256=GeWVeV2PvgLQV8ecVUA2g3-VvdzMsedgIDUSpn8DByk,774
  3194: django/contrib/sessions/locale/cy/LC_MESSAGES/django.po,sha256=zo18MXtkEdO1L0Q6ewFurx3lsEWTCdh0JpQJTmvw5bY,952
  3195: django/contrib/sessions/locale/da/LC_MESSAGES/django.mo,sha256=7_YecCzfeYQp9zVYt2B7MtjhAAuVb0BcK2D5Qv_uAbg,681
  3196: django/contrib/sessions/locale/da/LC_MESSAGES/django.po,sha256=qX_Oo7niVo57bazlIYFA6bnVmPBclUUTWvZFYNLaG04,880
  3197: django/contrib/sessions/locale/de/LC_MESSAGES/django.mo,sha256=N3kTal0YK9z7Te3zYGLbJmoSB6oWaviWDLGdPlsPa9g,721
  3198: django/contrib/sessions/locale/de/LC_MESSAGES/django.po,sha256=0qnfDeCUQN2buKn6R0MvwhQP05XWxSu-xgvfxvnJe3k,844
  3199: django/contrib/sessions/locale/dsb/LC_MESSAGES/django.mo,sha256=RABl3WZmY6gLh4IqmTUhoBEXygDzjp_5lLF1MU9U5fA,810
  3200: django/contrib/sessions/locale/dsb/LC_MESSAGES/django.po,sha256=cItKs5tASYHzDxfTg0A_dgBQounpzoGyOEFn18E_W_g,934
  3201: django/contrib/sessions/locale/el/LC_MESSAGES/django.mo,sha256=QbTbmcfgc8_4r5hFrIghDhk2XQ4f8_emKmqupMG2ah0,809
  3202: django/contrib/sessions/locale/el/LC_MESSAGES/django.po,sha256=HeaEbpVmFhhrZt2NsZteYaYoeo8FYKZF0IoNJwtzZkc,971
  3203: django/contrib/sessions/locale/en/LC_MESSAGES/django.mo,sha256=U0OV81NfbuNL9ctF-gbGUG5al1StqN-daB-F-gFBFC8,356
  3204: django/contrib/sessions/locale/en/LC_MESSAGES/django.po,sha256=afaM-IIUZtcRZduojUTS8tT0w7C4Ya9lXgReOvq_iF0,804
  3205: django/contrib/sessions/locale/en_AU/LC_MESSAGES/django.mo,sha256=FgY1K6IVyQjMjXqVZxcsyWW_Tu5ckfrbmIfNYq5P-_E,693
  3206: django/contrib/sessions/locale/en_AU/LC_MESSAGES/django.po,sha256=cMV15gJq8jNSUzkhn7uyOf2JYMFx7BNH1oFYa1vISnc,853
  3207: django/contrib/sessions/locale/en_GB/LC_MESSAGES/django.mo,sha256=T5NQCTYkpERfP9yKbUvixT0VdBt1zGmGB8ITlkVc420,707
  3208: django/contrib/sessions/locale/en_GB/LC_MESSAGES/django.po,sha256=1ks_VE1qpEfPcyKg0HybkTG0-DTttTHTfUPhQCR53sw,849
  3209: django/contrib/sessions/locale/eo/LC_MESSAGES/django.mo,sha256=eBvYQbZS_WxVV3QCSZAOyHNIljC2ZXxVc4mktUuXVjI,727
  3210: django/contrib/sessions/locale/eo/LC_MESSAGES/django.po,sha256=Ru9xicyTgHWVHh26hO2nQNFRQmwBnYKEagsS8TZRv3E,917
  3211: django/contrib/sessions/locale/es/LC_MESSAGES/django.mo,sha256=jbHSvHjO2OCLlBD66LefocKOEbefWbPhj-l3NugiWuc,734
  3212: django/contrib/sessions/locale/es/LC_MESSAGES/django.po,sha256=fY5WXeONEXHeuBlH0LkvzdZ2CSgbvLZ8BJc429aIbhI,909
  3213: django/contrib/sessions/locale/es_AR/LC_MESSAGES/django.mo,sha256=_8icF2dMUWj4WW967rc5npgndXBAdJrIiz_VKf5D-Rw,694
  3214: django/contrib/sessions/locale/es_AR/LC_MESSAGES/django.po,sha256=AnmvjeOA7EBTJ6wMOkCl8JRLVYRU8KS0egPijcKutns,879
  3215: django/contrib/sessions/locale/es_CO/LC_MESSAGES/django.mo,sha256=UP7ia0gV9W-l0Qq5AS4ZPadJtml8iuzzlS5C9guMgh8,754
  3216: django/contrib/sessions/locale/es_CO/LC_MESSAGES/django.po,sha256=_XeiiRWvDaGjofamsRHr5up_EQvcw0w-GLLeWK27Af8,878
  3217: django/contrib/sessions/locale/es_MX/LC_MESSAGES/django.mo,sha256=MDM0K3xMvyf8ymvAurHYuacpxfG_YfJFyNnp1uuc6yY,756
  3218: django/contrib/sessions/locale/es_MX/LC_MESSAGES/django.po,sha256=Y7VNa16F_yyK7_XJvF36rR2XNW8aBJK4UDweufyXpxE,892
  3219: django/contrib/sessions/locale/es_VE/LC_MESSAGES/django.mo,sha256=59fZBDut-htCj38ZUoqPjhXJPjZBz-xpU9__QFr3kLs,486
  3220: django/contrib/sessions/locale/es_VE/LC_MESSAGES/django.po,sha256=zWjgB0AmsmhX2tjk1PgldttqY56Czz8epOVCaYWXTLU,761
  3221: django/contrib/sessions/locale/et/LC_MESSAGES/django.mo,sha256=aL1jZWourEC7jtjsuBZHD-Gw9lpL6L1SoqjTtzguxD0,737
  3222: django/contrib/sessions/locale/et/LC_MESSAGES/django.po,sha256=VNBYohAOs59jYWkjVMY-v2zwVy5AKrtBbFRJZLwdCFg,899
  3223: django/contrib/sessions/locale/eu/LC_MESSAGES/django.mo,sha256=M9piOB_t-ZnfN6pX-jeY0yWh2S_5cCuo1oGiy7X65A4,728
  3224: django/contrib/sessions/locale/eu/LC_MESSAGES/django.po,sha256=bHdSoknoH0_dy26e93tWVdO4TT7rnCPXlSLPsYAhwyw,893
  3225: django/contrib/sessions/locale/fa/LC_MESSAGES/django.mo,sha256=6DdJcqaYuBnhpFFHR42w-RqML0eQPFMAUEEDY0Redy8,755
  3226: django/contrib/sessions/locale/fa/LC_MESSAGES/django.po,sha256=rklhNf0UFl2bM6mt7x9lWvfzPH4XWGbrW9Gc2w-9rzg,922
  3227: django/contrib/sessions/locale/fi/LC_MESSAGES/django.mo,sha256=oAugvlTEvJmG8KsZw09WcfnifYY5oHnGo4lxcxqKeaY,721
  3228: django/contrib/sessions/locale/fi/LC_MESSAGES/django.po,sha256=BVVrjbZZtLGAuZ9HK63p769CbjZFZMlS4BewSMfNMKU,889
  3229: django/contrib/sessions/locale/fr/LC_MESSAGES/django.mo,sha256=aDGYdzx2eInF6IZ-UzPDEJkuYVPnvwVND3qVuSfJNWw,692
  3230: django/contrib/sessions/locale/fr/LC_MESSAGES/django.po,sha256=hARxGdtBOzEZ_iVyzkNvcKlgyM8fOkdXTH3upj2XFYM,893
  3231: django/contrib/sessions/locale/fy/LC_MESSAGES/django.mo,sha256=YQQy7wpjBORD9Isd-p0lLzYrUgAqv770_56-vXa0EOc,476
  3232: django/contrib/sessions/locale/fy/LC_MESSAGES/django.po,sha256=U-VEY4WbmIkmrnPK4Mv-B-pbdtDzusBCVmE8iHyvzFU,751
  3233: django/contrib/sessions/locale/ga/LC_MESSAGES/django.mo,sha256=zTrydRCRDiUQwF4tQ3cN1-5w36i6KptagsdA5_SaGy0,747
  3234: django/contrib/sessions/locale/ga/LC_MESSAGES/django.po,sha256=Qpk1JaUWiHSEPdgBk-O_KfvGzwlZ4IAA6c6-nsJe400,958
  3235: django/contrib/sessions/locale/gd/LC_MESSAGES/django.mo,sha256=Yi8blY_fUD5YTlnUD6YXZvv1qjm4QDriO6CJIUe1wIk,791
  3236: django/contrib/sessions/locale/gd/LC_MESSAGES/django.po,sha256=fEa40AUqA5vh743Zqv0FO2WxSFXGYk4IzUR4BoaP-C4,890
  3237: django/contrib/sessions/locale/gl/LC_MESSAGES/django.mo,sha256=uQ2ZmtUNoVCB2mSlMGSy-j4a_hu9PBfJDo796d8beFA,701
  3238: django/contrib/sessions/locale/gl/LC_MESSAGES/django.po,sha256=FovTLHdVK15N9FI9lFFAOP4zt7GsvO0kKdocgeVDkNk,902
  3239: django/contrib/sessions/locale/he/LC_MESSAGES/django.mo,sha256=qhgjSWfGAOgl-i7iwzSrJttx88xcj1pB0iLkEK64mJU,809
  3240: django/contrib/sessions/locale/he/LC_MESSAGES/django.po,sha256=KvQG6wOpokM-2JkhWnB2UUQacy5Ie1402K_pH2zUOu0,1066
  3241: django/contrib/sessions/locale/hi/LC_MESSAGES/django.mo,sha256=naqxOjfAnNKy3qqnUG-4LGf9arLRJpjyWWmSj5tEfao,759
  3242: django/contrib/sessions/locale/hi/LC_MESSAGES/django.po,sha256=WnTGvOz9YINMcUJg2BYCaHceZLKaTfsba_0AZtRNP38,951
  3243: django/contrib/sessions/locale/hr/LC_MESSAGES/django.mo,sha256=axyJAmXmadpFxIhu8rroVD8NsGGadQemh9-_ZDo7L1U,819
  3244: django/contrib/sessions/locale/hr/LC_MESSAGES/django.po,sha256=3G-qOYXBO-eMWWsa5LwTCW9M1oF0hlWgEz7hAK8hJqI,998
  3245: django/contrib/sessions/locale/hsb/LC_MESSAGES/django.mo,sha256=_OXpOlCt4KU0i65Iw4LMjSsyn__E9wH20l9vDNBSEzw,805
  3246: django/contrib/sessions/locale/hsb/LC_MESSAGES/django.po,sha256=yv3vX_UCDrdl07GQ79Mnytwgz2oTvySYOG9enzMpFJA,929
  3247: django/contrib/sessions/locale/hu/LC_MESSAGES/django.mo,sha256=ik40LnsWkKYEUioJB9e11EX9XZ-qWMa-S7haxGhM-iI,727
  3248: django/contrib/sessions/locale/hu/LC_MESSAGES/django.po,sha256=1-UWEEsFxRwmshP2x4pJbitWIGZ1YMeDDxnAX-XGNxc,884
  3249: django/contrib/sessions/locale/hy/LC_MESSAGES/django.mo,sha256=x6VQWGdidRJFUJme-6jf1pcitktcQHQ7fhmw2UBej1Q,815
  3250: django/contrib/sessions/locale/hy/LC_MESSAGES/django.po,sha256=eRMa3_A2Vx195mx2lvza1v-wcEcEeMrU63f0bgPPFjc,893
  3251: django/contrib/sessions/locale/ia/LC_MESSAGES/django.mo,sha256=-o4aQPNJeqSDRSLqcKuYvJuKNBbFqDJDe3IzHgSgZeQ,744
  3252: django/contrib/sessions/locale/ia/LC_MESSAGES/django.po,sha256=PULLDd3QOIU03kgradgQzT6IicoPhLPlUvFgRl-tGbA,869
  3253: django/contrib/sessions/locale/id/LC_MESSAGES/django.mo,sha256=mOaIF0NGOO0-dt-nhHL-i3cfvt9-JKTbyUkFWPqDS9Y,705
  3254: django/contrib/sessions/locale/id/LC_MESSAGES/django.po,sha256=EA6AJno3CaFOO-dEU9VQ_GEI-RAXS0v0uFqn1RJGjEs,914
  3255: django/contrib/sessions/locale/io/LC_MESSAGES/django.mo,sha256=_rqAY6reegqmxmWc-pW8_kDaG9zflZuD-PGOVFsjRHo,683
  3256: django/contrib/sessions/locale/io/LC_MESSAGES/django.po,sha256=tbKMxGuB6mh_m0ex9rO9KkTy6qyuRW2ERrQsGwmPiaw,840
  3257: django/contrib/sessions/locale/is/LC_MESSAGES/django.mo,sha256=3QeMl-MCnBie9Sc_aQ1I7BrBhkbuArpoSJP95UEs4lg,706
  3258: django/contrib/sessions/locale/is/LC_MESSAGES/django.po,sha256=LADIFJv8L5vgDJxiQUmKPSN64zzzrIKImh8wpLBEVWQ,853
  3259: django/contrib/sessions/locale/it/LC_MESSAGES/django.mo,sha256=qTY3O-0FbbpZ5-BR5xOJWP0rlnIkBZf-oSawW_YJWlk,726
  3260: django/contrib/sessions/locale/it/LC_MESSAGES/django.po,sha256=hEv0iTGLuUvEBk-lF-w7a9P3ifC0-eiodNtuSc7cXhg,869
  3261: django/contrib/sessions/locale/ja/LC_MESSAGES/django.mo,sha256=hbv9FzWzXRIGRh_Kf_FLQB34xfmPU_9RQKn9u1kJqGU,757
  3262: django/contrib/sessions/locale/ja/LC_MESSAGES/django.po,sha256=ppGx5ekOWGgDF3vzyrWsqnFUZ-sVZZhiOhvAzl_8v54,920
  3263: django/contrib/sessions/locale/ka/LC_MESSAGES/django.mo,sha256=VZ-ysrDbea_-tMV-1xtlTeW62IAy2RWR94V3Y1iSh4U,803
  3264: django/contrib/sessions/locale/ka/LC_MESSAGES/django.po,sha256=hqiWUiATlrc7qISF7ndlelIrFwc61kzhKje9l-DY6V4,955
  3265: django/contrib/sessions/locale/kab/LC_MESSAGES/django.mo,sha256=W_yE0NDPJrVznA2Qb89VuprJNwyxSg59ovvjkQe6mAs,743
  3266: django/contrib/sessions/locale/kab/LC_MESSAGES/django.po,sha256=FJeEuv4P3NT_PpWHEUsQVSWXu65nYkJ6Z2AlbSKb0ZA,821
  3267: django/contrib/sessions/locale/kk/LC_MESSAGES/django.mo,sha256=FROGz_MuIhsIU5_-EYV38cHnRZrc3-OxxkBeK0ax9Rk,810
  3268: django/contrib/sessions/locale/kk/LC_MESSAGES/django.po,sha256=P-oHO3Oi3V_RjWHjEAHdTrDfTwKP2xh3yJh7BlXL1VQ,1029
  3269: django/contrib/sessions/locale/km/LC_MESSAGES/django.mo,sha256=VOuKsIG2DEeCA5JdheuMIeJlpmAhKrI6lD4KWYqIIPk,929
  3270: django/contrib/sessions/locale/km/LC_MESSAGES/django.po,sha256=09i6Nd_rUK7UqFpJ70LMXTR6xS0NuGETRLe0CopMVBk,1073
  3271: django/contrib/sessions/locale/kn/LC_MESSAGES/django.mo,sha256=TMZ71RqNR6zI20BeozyLa9cjYrWlvfIajGDfpnHd3pQ,810
  3272: django/contrib/sessions/locale/kn/LC_MESSAGES/django.po,sha256=whdM8P74jkAAHvjgJN8Q77dYd9sIsf_135ID8KBu-a8,990
  3273: django/contrib/sessions/locale/ko/LC_MESSAGES/django.mo,sha256=EUyVQYGtiFJg01mP30a0iOqBYHvpzHAcGTZM28Ubs5Q,700
  3274: django/contrib/sessions/locale/ko/LC_MESSAGES/django.po,sha256=PjntvSzRz_Aekj9VFhGsP5yO6rAsxTMzwFj58JqToIU,855
  3275: django/contrib/sessions/locale/ky/LC_MESSAGES/django.mo,sha256=ME7YUgKOYQz9FF_IdrqHImieEONDrkcn4T3HxTZKSV0,742
  3276: django/contrib/sessions/locale/ky/LC_MESSAGES/django.po,sha256=JZHTs9wYmlWzilRMyp-jZWFSzGxWtPiQefPmLL9yhtM,915
  3277: django/contrib/sessions/locale/lb/LC_MESSAGES/django.mo,sha256=xokesKl7h7k9dXFKIJwGETgwx1Ytq6mk2erBSxkgY-o,474
  3278: django/contrib/sessions/locale/lb/LC_MESSAGES/django.po,sha256=3igeAnQjDg6D7ItBkQQhyBoFJOZlBxT7NoZiExwD-Fo,749
  3279: django/contrib/sessions/locale/lt/LC_MESSAGES/django.mo,sha256=L9w8-qxlDlCqR_2P0PZegfhok_I61n0mJ1koJxzufy4,786
  3280: django/contrib/sessions/locale/lt/LC_MESSAGES/django.po,sha256=dEefLGtg5flFr_v4vHS5HhK1kxx9WYWTw98cvEn132M,1023
  3281: django/contrib/sessions/locale/lv/LC_MESSAGES/django.mo,sha256=exEzDUNwNS0GLsUkKPu_SfqBxU7T6VRA_T2schIQZ88,753
  3282: django/contrib/sessions/locale/lv/LC_MESSAGES/django.po,sha256=fBgQEbsGg1ECVm1PFDrS2sfKs2eqmsqrSYzx9ELotNQ,909
  3283: django/contrib/sessions/locale/mk/LC_MESSAGES/django.mo,sha256=4oTWp8-qzUQBiqG32hNieABgT3O17q2C4iEhcFtAxLA,816
  3284: django/contrib/sessions/locale/mk/LC_MESSAGES/django.po,sha256=afApb5YRhPXUWR8yF_TTym73u0ov7lWiwRda1-uNiLY,988
  3285: django/contrib/sessions/locale/ml/LC_MESSAGES/django.mo,sha256=tff5TsHILSV1kAAB3bzHQZDB9fgMglZJTofzCunGBzc,854
  3286: django/contrib/sessions/locale/ml/LC_MESSAGES/django.po,sha256=eRkeupt42kUey_9vJmlH8USshnXPZ8M7aYHq88u-5iY,1016
  3287: django/contrib/sessions/locale/mn/LC_MESSAGES/django.mo,sha256=CcCH2ggVYrD29Q11ZMthcscBno2ePkQDbZfoYquTRPM,784
  3288: django/contrib/sessions/locale/mn/LC_MESSAGES/django.po,sha256=nvcjbJzXiDvWFXrM5CxgOQIq8XucsZEUVdYkY8LnCRE,992
  3289: django/contrib/sessions/locale/mr/LC_MESSAGES/django.mo,sha256=2Z5jaGJzpiJTCnhCk8ulCDeAdj-WwR99scdHFPRoHoA,468
  3290: django/contrib/sessions/locale/mr/LC_MESSAGES/django.po,sha256=FQRdZ-qIDuvTCrwbnWfxoxNi8rywLSebcNbxGvr-hb0,743
  3291: django/contrib/sessions/locale/ms/LC_MESSAGES/django.mo,sha256=rFi4D_ZURYUPjs5AqJ66bW70yL7AekAKWnrZRBvGPiE,649
  3292: django/contrib/sessions/locale/ms/LC_MESSAGES/django.po,sha256=nZuJ_D0JZUzmGensLa7tSgzbBo05qgQcuHmte2oU6WQ,786
  3293: django/contrib/sessions/locale/my/LC_MESSAGES/django.mo,sha256=8zzzyfJYok969YuAwDUaa6YhxaSi3wcXy3HRNXDb_70,872
  3294: django/contrib/sessions/locale/my/LC_MESSAGES/django.po,sha256=mfs0zRBI0tugyyEfXBZzZ_FMIohydq6EYPZGra678pw,997
  3295: django/contrib/sessions/locale/nb/LC_MESSAGES/django.mo,sha256=hfJ1NCFgcAAtUvNEpaZ9b31PyidHxDGicifUWANIbM8,717
  3296: django/contrib/sessions/locale/nb/LC_MESSAGES/django.po,sha256=yXr6oYuiu01oELdQKuztQFWz8x5C2zS5OzEfU9MHJsU,908
  3297: django/contrib/sessions/locale/ne/LC_MESSAGES/django.mo,sha256=slFgMrqGVtLRHdGorLGPpB09SM92_WnbnRR0rlpNlPQ,802
  3298: django/contrib/sessions/locale/ne/LC_MESSAGES/django.po,sha256=1vyoiGnnaB8f9SFz8PGfzpw6V_NoL78DQwjjnB6fS98,978
  3299: django/contrib/sessions/locale/nl/LC_MESSAGES/django.mo,sha256=84BTlTyxa409moKbQMFyJisI65w22p09qjJHBAmQe-g,692
  3300: django/contrib/sessions/locale/nl/LC_MESSAGES/django.po,sha256=smRr-QPGm6h6hdXxghggWES8b2NnL7yDQ07coUypa8g,909
  3301: django/contrib/sessions/locale/nn/LC_MESSAGES/django.mo,sha256=cytH72J3yS1PURcgyrD8R2PV5d3SbPE73IAqOMBPPVg,667
  3302: django/contrib/sessions/locale/nn/LC_MESSAGES/django.po,sha256=y9l60yy_W3qjxWzxgJg5VgEH9KAIHIQb5hv7mgnep9w,851
  3303: django/contrib/sessions/locale/os/LC_MESSAGES/django.mo,sha256=xVux1Ag45Jo9HQBbkrRzcWrNjqP09nMQl16jIh0YVlo,732
  3304: django/contrib/sessions/locale/os/LC_MESSAGES/django.po,sha256=1hG5Vsz2a2yW05_Z9cTNrBKtK9VRPZuQdx4KJ_0n98o,892
  3305: django/contrib/sessions/locale/pa/LC_MESSAGES/django.mo,sha256=qEx4r_ONwXK1-qYD5uxxXEQPqK5I6rf38QZoUSm7UVA,771
  3306: django/contrib/sessions/locale/pa/LC_MESSAGES/django.po,sha256=M7fmVGP8DtZGEuTV3iJhuWWqILVUTDZvUey_mrP4_fM,918
  3307: django/contrib/sessions/locale/pl/LC_MESSAGES/django.mo,sha256=F9CQb7gQ1ltP6B82JNKu8IAsTdHK5TNke0rtDIgNz3c,828
  3308: django/contrib/sessions/locale/pl/LC_MESSAGES/django.po,sha256=C_MJBB-vwTZbx-t4-mzun-RxHhdOVv04b6xrWdnTv8E,1084
  3309: django/contrib/sessions/locale/pt/LC_MESSAGES/django.mo,sha256=dlJF7hF4GjLmQPdAJhtf-FCKX26XsOmZlChOcxxIqPk,738
  3310: django/contrib/sessions/locale/pt/LC_MESSAGES/django.po,sha256=cOycrw3HCHjSYBadpalyrg5LdRTlqZCTyMh93GOQ8O0,896
  3311: django/contrib/sessions/locale/pt_BR/LC_MESSAGES/django.mo,sha256=XHNF5D8oXIia3e3LYwxd46a2JOgDc_ykvc8yuo21fT0,757
  3312: django/contrib/sessions/locale/pt_BR/LC_MESSAGES/django.po,sha256=K_zxKaUKngWPFpvHgXOcymJEsiONSw-OrVrroRXmUUk,924
  3313: django/contrib/sessions/locale/ro/LC_MESSAGES/django.mo,sha256=WR9I9Gum_pq7Qg2Gzhf-zAv43OwR_uDtsbhtx4Ta5gE,776
  3314: django/contrib/sessions/locale/ro/LC_MESSAGES/django.po,sha256=fEgVxL_0Llnjspu9EsXBf8AVL0DGdfF7NgV88G7WN1E,987
  3315: django/contrib/sessions/locale/ru/LC_MESSAGES/django.mo,sha256=n-8vXR5spEbdfyeWOYWC_6kBbAppNoRrWYgqKFY6gJA,913
  3316: django/contrib/sessions/locale/ru/LC_MESSAGES/django.po,sha256=sNqNGdoof6eXzFlh4YIp1O54MdDOAFDjD3GvAFsNP8k,1101
  3317: django/contrib/sessions/locale/sk/LC_MESSAGES/django.mo,sha256=Yntm624Wt410RwuNPU1c-WwQoyrRrBs69VlKMlNUHeQ,766
  3318: django/contrib/sessions/locale/sk/LC_MESSAGES/django.po,sha256=wt7BJk6RpFogJ2Wwa9Mh0mJi9YMpNYKTUSDuDuv1Ong,975
  3319: django/contrib/sessions/locale/sl/LC_MESSAGES/django.mo,sha256=EE6mB8BiYRyAxK6qzurRWcaYVs96FO_4rERYQdtIt3k,770
  3320: django/contrib/sessions/locale/sl/LC_MESSAGES/django.po,sha256=KTjBWyvaNCHbpV9K6vbnavwxxXqf2DlIqVPv7MVFcO8,928
  3321: django/contrib/sessions/locale/sq/LC_MESSAGES/django.mo,sha256=eRaTy3WOC76EYLtMSD4xtJj2h8eE4W-TS4VvCVxI5bw,683
  3322: django/contrib/sessions/locale/sq/LC_MESSAGES/django.po,sha256=9pzp7834LQKafe5fJzC4OKsAd6XfgtEQl6K6hVLaBQM,844
  3323: django/contrib/sessions/locale/sr/LC_MESSAGES/django.mo,sha256=ZDBOYmWIoSyDeT0nYIIFeMtW5jwpr257CbdTZlkVeRQ,855
  3324: django/contrib/sessions/locale/sr/LC_MESSAGES/django.po,sha256=OXQOYeac0ghuzLrwaErJGr1FczuORTu2yroFX5hvRnk,1027
  3325: django/contrib/sessions/locale/sr_Latn/LC_MESSAGES/django.mo,sha256=f3x9f9hTOsJltghjzJMdd8ueDwzxJex6zTXsU-_Hf_Y,757
  3326: django/contrib/sessions/locale/sr_Latn/LC_MESSAGES/django.po,sha256=HKjo7hjSAvgrIvlI0SkgF3zxz8TtKWyBT51UGNhDwek,946
  3327: django/contrib/sessions/locale/sv/LC_MESSAGES/django.mo,sha256=SGbr0K_5iAMA22MfseAldMDgLSEBrI56pCtyV8tMAPc,707
  3328: django/contrib/sessions/locale/sv/LC_MESSAGES/django.po,sha256=vraY3915wBYGeYu9Ro0-TlBeLWqGZP1fbckLv8y47Ys,853
  3329: django/contrib/sessions/locale/sw/LC_MESSAGES/django.mo,sha256=Edhqp8yuBnrGtJqPO7jxobeXN4uU5wKSLrOsFO1F23k,743
  3330: django/contrib/sessions/locale/sw/LC_MESSAGES/django.po,sha256=iY4rN4T-AA2FBQA7DiWWFvrclqKiDYQefqwwVw61-f8,858
  3331: django/contrib/sessions/locale/ta/LC_MESSAGES/django.mo,sha256=qLIThhFQbJKc1_UVr7wVIm1rJfK2rO5m84BCB_oKq7s,801
  3332: django/contrib/sessions/locale/ta/LC_MESSAGES/django.po,sha256=bYqtYf9XgP9IKKFJXh0u64JhRhDvPPUliI1J-NeRpKE,945
  3333: django/contrib/sessions/locale/te/LC_MESSAGES/django.mo,sha256=kteZeivEckt4AmAeKgmgouMQo1qqSQrI8M42B16gMnQ,786
  3334: django/contrib/sessions/locale/te/LC_MESSAGES/django.po,sha256=dQgiNS52RHrL6bV9CEO7Jk9lk3YUQrUBDCg_bP2OSZc,980
  3335: django/contrib/sessions/locale/tg/LC_MESSAGES/django.mo,sha256=N6AiKfV47QTlO5Z_r4SQZXVLtouu-NVSwWkePgD17Tc,747
  3336: django/contrib/sessions/locale/tg/LC_MESSAGES/django.po,sha256=wvvDNu060yqlTxy3swM0x3v6QpvCB9DkfNm0Q-kb9Xk,910
  3337: django/contrib/sessions/locale/th/LC_MESSAGES/django.mo,sha256=D41vbkoYMdYPj3587p-c5yytLVi9pE5xvRZEYhZrxPs,814
  3338: django/contrib/sessions/locale/th/LC_MESSAGES/django.po,sha256=43704TUv4ysKhL8T5MowZwlyv1JZrPyVGrpdIyb3r40,988
  3339: django/contrib/sessions/locale/tk/LC_MESSAGES/django.mo,sha256=pT_hpKCwFT60GUXzD_4z8JOhmh1HRnkZj-QSouVEgUA,699
  3340: django/contrib/sessions/locale/tk/LC_MESSAGES/django.po,sha256=trqXxfyIbh4V4szol0pXETmEWRxAAKywPZ9EzVMVE-I,865
  3341: django/contrib/sessions/locale/tr/LC_MESSAGES/django.mo,sha256=STDnYOeO1d9nSCVf7pSkMq8R7z1aeqq-xAuIYjsofuE,685
  3342: django/contrib/sessions/locale/tr/LC_MESSAGES/django.po,sha256=XYKo0_P5xitYehvjMzEw2MTp_Nza-cIXEECV3dA6BmY,863
  3343: django/contrib/sessions/locale/tt/LC_MESSAGES/django.mo,sha256=Q-FGu_ljTsxXO_EWu7zCzGwoqFXkeoTzWSlvx85VLGc,806
  3344: django/contrib/sessions/locale/tt/LC_MESSAGES/django.po,sha256=UC85dFs_1836noZTuZEzPqAjQMFfSvj7oGmEWOGcfCA,962
  3345: django/contrib/sessions/locale/udm/LC_MESSAGES/django.mo,sha256=CNmoKj9Uc0qEInnV5t0Nt4ZnKSZCRdIG5fyfSsqwky4,462
  3346: django/contrib/sessions/locale/udm/LC_MESSAGES/django.po,sha256=CPml2Fn9Ax_qO5brCFDLPBoTiNdvsvJb1btQ0COwUfY,737
  3347: django/contrib/sessions/locale/uk/LC_MESSAGES/django.mo,sha256=jzNrLuFghQMCHNRQ0ihnKMCicgear0yWiTOLnvdPszw,841
  3348: django/contrib/sessions/locale/uk/LC_MESSAGES/django.po,sha256=4K2geuGjRpJCtNfGPMhYWZlGxUy5xzIoDKA2jL2iGos,1171
  3349: django/contrib/sessions/locale/ur/LC_MESSAGES/django.mo,sha256=FkGIiHegr8HR8zjVyJ9TTW1T9WYtAL5Mg77nRKnKqWk,729
  3350: django/contrib/sessions/locale/ur/LC_MESSAGES/django.po,sha256=qR4QEBTP6CH09XFCzsPSPg2Dv0LqzbRV_I67HO2OUwk,879
  3351: django/contrib/sessions/locale/uz/LC_MESSAGES/django.mo,sha256=asPu0RhMB_Ui1li-OTVL4qIXnM9XpjsYyx5yJldDYBY,744
  3352: django/contrib/sessions/locale/uz/LC_MESSAGES/django.po,sha256=KsHuLgGJt-KDH0h6ND7JLP2dDJAdLVHSlau4DkkfqA8,880
  3353: django/contrib/sessions/locale/vi/LC_MESSAGES/django.mo,sha256=KriTpT-Hgr10DMnY5Bmbd4isxmSFLmav8vg2tuL2Bb8,679
  3354: django/contrib/sessions/locale/vi/LC_MESSAGES/django.po,sha256=M7S46Q0Q961ykz_5FCAN8SXQ54w8tp4rZeZpy6bPtXs,909
  3355: django/contrib/sessions/locale/zh_Hans/LC_MESSAGES/django.mo,sha256=zsbhIMocgB8Yn1XEBxbIIbBh8tLifvvYNlhe5U61ch8,722
  3356: django/contrib/sessions/locale/zh_Hans/LC_MESSAGES/django.po,sha256=tPshgXjEv6pME4N082ztamJhd5whHB2_IV_egdP-LlQ,889
  3357: django/contrib/sessions/locale/zh_Hant/LC_MESSAGES/django.mo,sha256=WZzfpFKZ41Pu8Q9SuhGu3hXwp4eiq8Dt8vdiQfxvF9M,733
  3358: django/contrib/sessions/locale/zh_Hant/LC_MESSAGES/django.po,sha256=6IRDQu6-PAYh6SyEIcKdhuR172lX0buY8qqsU0QXlYU,898
  3359: django/contrib/sessions/management/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  3360: django/contrib/sessions/management/__pycache__/__init__.cpython-311.pyc,,
  3361: django/contrib/sessions/management/commands/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  3362: django/contrib/sessions/management/commands/__pycache__/__init__.cpython-311.pyc,,
  3363: django/contrib/sessions/management/commands/__pycache__/clearsessions.cpython-311.pyc,,
  3364: django/contrib/sessions/management/commands/clearsessions.py,sha256=pAiO5o7zgButVlYAV93bPnmiwzWP7V5N7-xPtxSkjJg,661
  3365: django/contrib/sessions/middleware.py,sha256=ghX32L-B6lQokp8lH6_f0AvQ_9YhV4RJ3g9YkhZt23M,3496
  3366: django/contrib/sessions/migrations/0001_initial.py,sha256=KqQ44jk-5RNcTdqUv95l_UnoMA8cP5O-0lrjoJ8vabk,1148
  3367: django/contrib/sessions/migrations/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  3368: django/contrib/sessions/migrations/__pycache__/0001_initial.cpython-311.pyc,,
  3369: django/contrib/sessions/migrations/__pycache__/__init__.cpython-311.pyc,,
  3370: django/contrib/sessions/models.py,sha256=BguwuQSDzpeTNXhteYRAcspg1rop431tjFeZUVWZNYc,1250
  3371: django/contrib/sessions/serializers.py,sha256=x8cVZhsG5RBJZaK4wKsuAcEYKv6rop9V9Y7mDySyOwM,256
  3372  django/contrib/sitemaps/__init__.py,sha256=2n2VjL0dXfSiIJMXVOjvpPW8tu8aKiqpd9wYRkmiiHc,9053

  3694  django/core/checks/security/__pycache__/csrf.cpython-311.pyc,,
  3695: django/core/checks/security/__pycache__/sessions.cpython-311.pyc,,
  3696  django/core/checks/security/base.py,sha256=I0Gm446twRIhbRopEmKsdsYW_NdI7_nK_ZV28msRPEo,9140
  3697  django/core/checks/security/csrf.py,sha256=hmFJ4m9oxDGwhDAWedmtpnIYQcI8Mxcge1D6CCoOBbc,2055
  3698: django/core/checks/security/sessions.py,sha256=Qyb93CJeQBM5LLhhrqor4KQJR2tSpFklS-p7WltXcHc,2554
  3699  django/core/checks/templates.py,sha256=fGX25HveO6TJCeFTqhis0rQfVcD8gif4F_iGPeJdiKI,2257

myproject\Lib\site-packages\pip\_internal\self_outdated_check.py:
   21  from pip._internal.models.selection_prefs import SelectionPreferences
   22: from pip._internal.network.session import PipSession
   23  from pip._internal.utils.compat import WINDOWS

  156  def _get_current_remote_pip_version(
  157:     session: PipSession, options: optparse.Values
  158  ) -> str:

  160      link_collector = LinkCollector.create(
  161:         session,
  162          options=options,

  214  
  215: def pip_self_version_check(session: PipSession, options: optparse.Values) -> None:
  216      """Check for an update for pip.

  231              get_remote_version=functools.partial(
  232:                 _get_current_remote_pip_version, session, options
  233              ),

myproject\Lib\site-packages\pip\_internal\cli\req_command.py:
    1: """Contains the Command base classes that depend on PipSession.
    2  

   23  from pip._internal.models.target_python import TargetPython
   24: from pip._internal.network.session import PipSession
   25  from pip._internal.operations.build.build_tracker import BuildTracker

   70  
   71: class SessionCommandMixin(CommandContextMixIn):
   72  
   73      """
   74:     A class mixin for command classes needing _build_session().
   75      """

   78          super().__init__()
   79:         self._session: Optional[PipSession] = None
   80  

   94  
   95:     def get_default_session(self, options: Values) -> PipSession:
   96:         """Get a default-managed session."""
   97:         if self._session is None:
   98:             self._session = self.enter_context(self._build_session(options))
   99:             # there's no type annotation on requests.Session, so it's
  100:             # automatically ContextManager[Any] and self._session becomes Any,
  101              # then https://github.com/python/mypy/issues/7696 kicks in
  102:             assert self._session is not None
  103:         return self._session
  104  
  105:     def _build_session(
  106          self,

  110          fallback_to_certifi: bool = False,
  111:     ) -> PipSession:
  112          cache_dir = options.cache_dir

  124  
  125:         session = PipSession(
  126              cache=os.path.join(cache_dir, "http") if cache_dir else None,

  134          if options.cert:
  135:             session.verify = options.cert
  136  

  138          if options.client_cert:
  139:             session.cert = options.client_cert
  140  

  142          if options.timeout or timeout:
  143:             session.timeout = timeout if timeout is not None else options.timeout
  144  

  146          if options.proxy:
  147:             session.proxies = {
  148                  "http": options.proxy,

  152          # Determine if we can prompt the user for authentication or not
  153:         session.auth.prompting = not options.no_input
  154  
  155:         return session
  156  
  157  
  158: class IndexGroupCommand(Command, SessionCommandMixin):
  159  

  178          # Otherwise, check if we're using the latest version of pip available.
  179:         session = self._build_session(
  180              options,

  188          )
  189:         with session:
  190:             pip_self_version_check(session, options)
  191  

  277          build_tracker: BuildTracker,
  278:         session: PipSession,
  279          finder: PackageFinder,

  314              build_tracker=build_tracker,
  315:             session=session,
  316              progress_bar=options.progress_bar,

  388          finder: PackageFinder,
  389:         session: PipSession,
  390      ) -> List[InstallRequirement]:

  400                  options=options,
  401:                 session=session,
  402              ):

  433              for parsed_req in parse_requirements(
  434:                 filename, finder=finder, options=options, session=session
  435              ):

  478          options: Values,
  479:         session: PipSession,
  480          target_python: Optional[TargetPython] = None,

  488          """
  489:         link_collector = LinkCollector.create(session, options=options)
  490          selection_prefs = SelectionPreferences(

myproject\Lib\site-packages\pip\_internal\commands\download.py:
   92  
   93:         session = self.get_default_session(options)
   94  

   97              options=options,
   98:             session=session,
   99              target_python=target_python,

  110  
  111:         reqs = self.get_requirements(args, options, finder, session)
  112          check_legacy_setup_py_options(

  119              build_tracker=build_tracker,
  120:             session=session,
  121              finder=finder,

myproject\Lib\site-packages\pip\_internal\commands\index.py:
   15  from pip._internal.models.target_python import TargetPython
   16: from pip._internal.network.session import PipSession
   17  from pip._internal.utils.misc import write_output

   79          options: Values,
   80:         session: PipSession,
   81          target_python: Optional[TargetPython] = None,

   86          """
   87:         link_collector = LinkCollector.create(session, options=options)
   88  

  108  
  109:         with self._build_session(options) as session:
  110              finder = self._build_package_finder(
  111                  options=options,
  112:                 session=session,
  113                  target_python=target_python,

myproject\Lib\site-packages\pip\_internal\commands\install.py:
  325  
  326:         session = self.get_default_session(options)
  327  

  330              options=options,
  331:             session=session,
  332              target_python=target_python,

  343          try:
  344:             reqs = self.get_requirements(args, options, finder, session)
  345              check_legacy_setup_py_options(

  379                  build_tracker=build_tracker,
  380:                 session=session,
  381                  finder=finder,

myproject\Lib\site-packages\pip\_internal\commands\list.py:
   15  from pip._internal.models.selection_prefs import SelectionPreferences
   16: from pip._internal.network.session import PipSession
   17  from pip._internal.utils.compat import stdlib_pkgs

  135      def _build_package_finder(
  136:         self, options: Values, session: PipSession
  137      ) -> PackageFinder:

  140          """
  141:         link_collector = LinkCollector.create(session, options=options)
  142  

  229      ) -> Generator["_DistWithLatestInfo", None, None]:
  230:         with self._build_session(options) as session:
  231:             finder = self._build_package_finder(options, session)
  232  

myproject\Lib\site-packages\pip\_internal\commands\search.py:
  12  from pip._internal.cli.base_command import Command
  13: from pip._internal.cli.req_command import SessionCommandMixin
  14  from pip._internal.cli.status_codes import NO_MATCHES_FOUND, SUCCESS

  33  
  34: class SearchCommand(Command, SessionCommandMixin):
  35      """Search for PyPI packages whose name or summary contains <query>."""

  71  
  72:         session = self.get_default_session(options)
  73  
  74:         transport = PipXmlrpcTransport(index_url, session)
  75          pypi = xmlrpc.client.ServerProxy(index_url, transport)

myproject\Lib\site-packages\pip\_internal\commands\uninstall.py:
   8  from pip._internal.cli.base_command import Command
   9: from pip._internal.cli.req_command import SessionCommandMixin, warn_if_run_as_root
  10  from pip._internal.cli.status_codes import SUCCESS

  21  
  22: class UninstallCommand(Command, SessionCommandMixin):
  23      """

  60      def run(self, options: Values, args: List[str]) -> int:
  61:         session = self.get_default_session(options)
  62  

  79              for parsed_req in parse_requirements(
  80:                 filename, options=options, session=session
  81              ):

myproject\Lib\site-packages\pip\_internal\commands\wheel.py:
  107      def run(self, options: Values, args: List[str]) -> int:
  108:         session = self.get_default_session(options)
  109  
  110:         finder = self._build_package_finder(options, session)
  111          wheel_cache = WheelCache(options.cache_dir, options.format_control)

  123  
  124:         reqs = self.get_requirements(args, options, finder, session)
  125          check_legacy_setup_py_options(

  151              build_tracker=build_tracker,
  152:             session=session,
  153              finder=finder,

myproject\Lib\site-packages\pip\_internal\index\collector.py:
   36  from pip._internal.models.search_scope import SearchScope
   37: from pip._internal.network.session import PipSession
   38  from pip._internal.network.utils import raise_for_status

   98  
   99: def _ensure_api_response(url: str, session: PipSession) -> None:
  100      """

  110  
  111:     resp = session.head(url, allow_redirects=True)
  112      raise_for_status(resp)

  116  
  117: def _get_simple_response(url: str, session: PipSession) -> Response:
  118      """Access an Simple API response with GET, and return the response.

  130      if is_archive_file(Link(url).filename):
  131:         _ensure_api_response(url, session=session)
  132  

  134  
  135:     resp = session.get(
  136          url,

  335  
  336: def _get_index_content(link: Link, *, session: PipSession) -> Optional["IndexContent"]:
  337      url = link.url.split("#", 1)[0]

  363      try:
  364:         resp = _get_simple_response(url, session=session)
  365      except _NotHTTP:

  412          self,
  413:         session: PipSession,
  414          search_scope: SearchScope,

  416          self.search_scope = search_scope
  417:         self.session = session
  418  

  421          cls,
  422:         session: PipSession,
  423          options: Values,

  426          """
  427:         :param session: The Session to use to make requests.
  428          :param suppress_no_index: Whether to ignore the --no-index option

  447          link_collector = LinkCollector(
  448:             session=session,
  449              search_scope=search_scope,

  460          """
  461:         return _get_index_content(location, session=self.session)
  462  

  472                  candidates_from_page=candidates_from_page,
  473:                 page_validator=self.session.is_secure_origin,
  474                  expand_dir=False,

  482                  candidates_from_page=candidates_from_page,
  483:                 page_validator=self.session.is_secure_origin,
  484                  expand_dir=True,

myproject\Lib\site-packages\pip\_internal\index\package_finder.py:
  688      def trusted_hosts(self) -> Iterable[str]:
  689:         for host_port in self._link_collector.session.pip_trusted_origins:
  690              yield build_netloc(*host_port)

myproject\Lib\site-packages\pip\_internal\network\download.py:
   15  from pip._internal.network.cache import is_from_cache
   16: from pip._internal.network.session import PipSession
   17  from pip._internal.network.utils import HEADERS, raise_for_status, response_chunks

  114  
  115: def _http_get_download(session: PipSession, link: Link) -> Response:
  116      target_url = link.url.split("#", 1)[0]
  117:     resp = session.get(target_url, headers=HEADERS, stream=True)
  118      raise_for_status(resp)

  124          self,
  125:         session: PipSession,
  126          progress_bar: str,
  127      ) -> None:
  128:         self._session = session
  129          self._progress_bar = progress_bar

  133          try:
  134:             resp = _http_get_download(self._session, link)
  135          except NetworkConnectionError as e:

  155          self,
  156:         session: PipSession,
  157          progress_bar: str,
  158      ) -> None:
  159:         self._session = session
  160          self._progress_bar = progress_bar

  167              try:
  168:                 resp = _http_get_download(self._session, link)
  169              except NetworkConnectionError as e:

myproject\Lib\site-packages\pip\_internal\network\lazy_wheel.py:
   14  from pip._internal.metadata import BaseDistribution, MemoryWheel, get_wheel_distribution
   15: from pip._internal.network.session import PipSession
   16  from pip._internal.network.utils import HEADERS, raise_for_status, response_chunks

   22  
   23: def dist_from_wheel_url(name: str, url: str, session: PipSession) -> BaseDistribution:
   24      """Return a distribution object from the given wheel URL.

   30      """
   31:     with LazyZipOverHTTP(url, session) as zf:
   32          # For read-only ZIP files, ZipFile only needs methods read,

   49      def __init__(
   50:         self, url: str, session: PipSession, chunk_size: int = CONTENT_CHUNK_SIZE
   51      ) -> None:
   52:         head = session.head(url, headers=HEADERS)
   53          raise_for_status(head)
   54          assert head.status_code == 200
   55:         self._session, self._url, self._chunk_size = session, url, chunk_size
   56          self._length = int(head.headers["Content-Length"])

  175          headers["Cache-Control"] = "no-cache"
  176:         return self._session.get(self._url, headers=headers, stream=True)
  177  

myproject\Lib\site-packages\pip\_internal\network\session.py:
    1: """PipSession and supporting code, containing all pip-specific
    2  network request configuration and behavior.

  317  
  318: class PipSession(requests.Session):
  319  

  344  
  345:         # Attach our Authentication handler to the session
  346          self.auth = MultiDomainBasicAuth(index_urls=index_urls)

  511      def request(self, method: str, url: str, *args: Any, **kwargs: Any) -> Response:
  512:         # Allow setting a default timeout on a session
  513          kwargs.setdefault("timeout", self.timeout)
  514:         # Allow setting a default proxies on a session
  515          kwargs.setdefault("proxies", self.proxies)

myproject\Lib\site-packages\pip\_internal\network\xmlrpc.py:
   9  from pip._internal.exceptions import NetworkConnectionError
  10: from pip._internal.network.session import PipSession
  11  from pip._internal.network.utils import raise_for_status

  19  class PipXmlrpcTransport(xmlrpc.client.Transport):
  20:     """Provide a `xmlrpclib.Transport` implementation via a `PipSession`
  21      object.

  24      def __init__(
  25:         self, index_url: str, session: PipSession, use_datetime: bool = False
  26      ) -> None:

  29          self._scheme = index_parts.scheme
  30:         self._session = session
  31  

  43              headers = {"Content-Type": "text/xml"}
  44:             response = self._session.post(
  45                  url,

myproject\Lib\site-packages\pip\_internal\operations\prepare.py:
   36  )
   37: from pip._internal.network.session import PipSession
   38  from pip._internal.operations.build.build_tracker import BuildTracker

  217          build_tracker: BuildTracker,
  218:         session: PipSession,
  219          progress_bar: str,

  230          self.build_tracker = build_tracker
  231:         self._session = session
  232:         self._download = Downloader(session, progress_bar)
  233:         self._batch_download = BatchDownloader(session, progress_bar)
  234          self.finder = finder

  428          try:
  429:             return dist_from_wheel_url(name, url, self._session)
  430          except HTTPRangeRequestUnsupported:

myproject\Lib\site-packages\pip\_internal\req\req_file.py:
   25  from pip._internal.models.search_scope import SearchScope
   26: from pip._internal.network.session import PipSession
   27  from pip._internal.network.utils import raise_for_status

  127      filename: str,
  128:     session: PipSession,
  129      finder: Optional["PackageFinder"] = None,

  135      :param filename:    Path or url of requirements file.
  136:     :param session:     PipSession instance.
  137      :param finder:      Instance of pip.index.PackageFinder.

  142      line_parser = get_line_parser(finder)
  143:     parser = RequirementsFileParser(session, line_parser)
  144  

  146          parsed_req = handle_line(
  147:             parsed_line, options=options, finder=finder, session=session
  148          )

  211      options: Optional[optparse.Values] = None,
  212:     session: Optional[PipSession] = None,
  213  ) -> None:

  246  
  247:         if session:
  248:             # We need to update the auth urls in session
  249:             session.update_index_urls(index_urls)
  250  

  263  
  264:         if session:
  265              for host in opts.trusted_hosts or []:
  266                  source = f"line {lineno} of {filename}"
  267:                 session.add_trusted_host(host, source=source)
  268  

  273      finder: Optional["PackageFinder"] = None,
  274:     session: Optional[PipSession] = None,
  275  ) -> Optional[ParsedRequirement]:

  281      :param finder:      The finder - updated by non-requirement lines.
  282:     :param session:     The session - updated by non-requirement lines.
  283  

  308              options,
  309:             session,
  310          )

  316          self,
  317:         session: PipSession,
  318          line_parser: LineParser,
  319      ) -> None:
  320:         self._session = session
  321          self._line_parser = line_parser

  362      ) -> Generator[ParsedLine, None, None]:
  363:         _, content = get_file_content(filename, self._session)
  364  

  521  
  522: def get_file_content(url: str, session: PipSession) -> Tuple[str, str]:
  523      """Gets the content of a file; it may be a filename, file: URL, or

  527      :param url:         File path or url.
  528:     :param session:     PipSession instance.
  529      """

  533      if scheme in ["http", "https", "file"]:
  534:         resp = session.get(url)
  535          raise_for_status(resp)

myproject\Lib\site-packages\pip\_internal\utils\inject_securetransport.py:
  3  The import should be done as early as possible, to ensure all requests and
  4: sessions (or whatever) are created after injecting SecureTransport.
  5  

myproject\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py:
  21  
  22: def get_session():
  23      adapter = CacheControlAdapter(

  25      )
  26:     sess = requests.Session()
  27      sess.mount("http://", adapter)

  41      args = get_args()
  42:     sess = get_session()
  43  

myproject\Lib\site-packages\pip\_vendor\pygments\lexers\_mapping.py:
   46      'BashLexer': ('pip._vendor.pygments.lexers.shell', 'Bash', ('bash', 'sh', 'ksh', 'zsh', 'shell'), ('*.sh', '*.ksh', '*.bash', '*.ebuild', '*.eclass', '*.exheres-0', '*.exlib', '*.zsh', '.bashrc', 'bashrc', '.bash_*', 'bash_*', 'zshrc', '.zshrc', '.kshrc', 'kshrc', 'PKGBUILD'), ('application/x-sh', 'application/x-shellscript', 'text/x-shellscript')),
   47:     'BashSessionLexer': ('pip._vendor.pygments.lexers.shell', 'Bash Session', ('console', 'shell-session'), ('*.sh-session', '*.shell-session'), ('application/x-shell-session', 'application/x-sh-session')),
   48      'BatchLexer': ('pip._vendor.pygments.lexers.shell', 'Batchfile', ('batch', 'bat', 'dosbatch', 'winbatch'), ('*.bat', '*.cmd'), ('application/x-dos-batch',)),

  131      'DuelLexer': ('pip._vendor.pygments.lexers.webmisc', 'Duel', ('duel', 'jbst', 'jsonml+bst'), ('*.duel', '*.jbst'), ('text/x-duel', 'text/x-jbst')),
  132:     'DylanConsoleLexer': ('pip._vendor.pygments.lexers.dylan', 'Dylan session', ('dylan-console', 'dylan-repl'), ('*.dylan-console',), ('text/x-dylan-console',)),
  133      'DylanLexer': ('pip._vendor.pygments.lexers.dylan', 'Dylan', ('dylan',), ('*.dylan', '*.dyl', '*.intr'), ('text/x-dylan',)),

  140      'EiffelLexer': ('pip._vendor.pygments.lexers.eiffel', 'Eiffel', ('eiffel',), ('*.e',), ('text/x-eiffel',)),
  141:     'ElixirConsoleLexer': ('pip._vendor.pygments.lexers.erlang', 'Elixir iex session', ('iex',), (), ('text/x-elixir-shellsession',)),
  142      'ElixirLexer': ('pip._vendor.pygments.lexers.erlang', 'Elixir', ('elixir', 'ex', 'exs'), ('*.ex', '*.eex', '*.exs', '*.leex'), ('text/x-elixir',)),

  148      'ErlangLexer': ('pip._vendor.pygments.lexers.erlang', 'Erlang', ('erlang',), ('*.erl', '*.hrl', '*.es', '*.escript'), ('text/x-erlang',)),
  149:     'ErlangShellLexer': ('pip._vendor.pygments.lexers.erlang', 'Erlang erl session', ('erl',), ('*.erl-sh',), ('text/x-erl-shellsession',)),
  150      'EvoqueHtmlLexer': ('pip._vendor.pygments.lexers.templates', 'HTML+Evoque', ('html+evoque',), ('*.html',), ('text/html+evoque',)),

  275      'MOOCodeLexer': ('pip._vendor.pygments.lexers.scripting', 'MOOCode', ('moocode', 'moo'), ('*.moo',), ('text/x-moocode',)),
  276:     'MSDOSSessionLexer': ('pip._vendor.pygments.lexers.shell', 'MSDOS Session', ('doscon',), (), ()),
  277      'Macaulay2Lexer': ('pip._vendor.pygments.lexers.macaulay2', 'Macaulay2', ('macaulay2',), ('*.m2',), ()),

  289      'MatlabLexer': ('pip._vendor.pygments.lexers.matlab', 'Matlab', ('matlab',), ('*.m',), ('text/matlab',)),
  290:     'MatlabSessionLexer': ('pip._vendor.pygments.lexers.matlab', 'Matlab session', ('matlabsession',), (), ()),
  291      'MaximaLexer': ('pip._vendor.pygments.lexers.maxima', 'Maxima', ('maxima', 'macsyma'), ('*.mac', '*.max'), ()),

  329      'NixLexer': ('pip._vendor.pygments.lexers.nix', 'Nix', ('nixos', 'nix'), ('*.nix',), ('text/x-nix',)),
  330:     'NodeConsoleLexer': ('pip._vendor.pygments.lexers.javascript', 'Node.js REPL console session', ('nodejsrepl',), (), ('text/x-nodejsrepl',)),
  331      'NotmuchLexer': ('pip._vendor.pygments.lexers.textfmts', 'Notmuch', ('notmuch',), (), ()),

  364      'PowerShellLexer': ('pip._vendor.pygments.lexers.shell', 'PowerShell', ('powershell', 'pwsh', 'posh', 'ps1', 'psm1'), ('*.ps1', '*.psm1'), ('text/x-powershell',)),
  365:     'PowerShellSessionLexer': ('pip._vendor.pygments.lexers.shell', 'PowerShell Session', ('pwsh-session', 'ps1con'), (), ()),
  366      'PraatLexer': ('pip._vendor.pygments.lexers.praat', 'Praat', ('praat',), ('*.praat', '*.proc', '*.psc'), ()),

  371      'ProtoBufLexer': ('pip._vendor.pygments.lexers.dsls', 'Protocol Buffer', ('protobuf', 'proto'), ('*.proto',), ()),
  372:     'PsyshConsoleLexer': ('pip._vendor.pygments.lexers.php', 'PsySH console session for PHP', ('psysh',), (), ()),
  373      'PugLexer': ('pip._vendor.pygments.lexers.html', 'Pug', ('pug', 'jade'), ('*.pug', '*.jade'), ('text/x-pug', 'text/x-jade')),

  377      'Python2TracebackLexer': ('pip._vendor.pygments.lexers.python', 'Python 2.x Traceback', ('py2tb',), ('*.py2tb',), ('text/x-python2-traceback',)),
  378:     'PythonConsoleLexer': ('pip._vendor.pygments.lexers.python', 'Python console session', ('pycon',), (), ('text/x-python-doctest',)),
  379      'PythonLexer': ('pip._vendor.pygments.lexers.python', 'Python', ('python', 'py', 'sage', 'python3', 'py3'), ('*.py', '*.pyw', '*.jy', '*.sage', '*.sc', 'SConstruct', 'SConscript', '*.bzl', 'BUCK', 'BUILD', 'BUILD.bazel', 'WORKSPACE', '*.tac'), ('text/x-python', 'application/x-python', 'text/x-python3', 'application/x-python3')),

  417      'RtsLexer': ('pip._vendor.pygments.lexers.trafficscript', 'TrafficScript', ('trafficscript', 'rts'), ('*.rts',), ()),
  418:     'RubyConsoleLexer': ('pip._vendor.pygments.lexers.ruby', 'Ruby irb session', ('rbcon', 'irb'), (), ('text/x-ruby-shellsession',)),
  419      'RubyLexer': ('pip._vendor.pygments.lexers.ruby', 'Ruby', ('ruby', 'rb', 'duby'), ('*.rb', '*.rbw', 'Rakefile', '*.rake', '*.gemspec', '*.rbx', '*.duby', 'Gemfile', 'Vagrantfile'), ('text/x-ruby', 'application/x-ruby')),

  475      'TcshLexer': ('pip._vendor.pygments.lexers.shell', 'Tcsh', ('tcsh', 'csh'), ('*.tcsh', '*.csh'), ('application/x-csh',)),
  476:     'TcshSessionLexer': ('pip._vendor.pygments.lexers.shell', 'Tcsh Session', ('tcshcon',), (), ()),
  477      'TeaTemplateLexer': ('pip._vendor.pygments.lexers.templates', 'Tea', ('tea',), ('*.tea',), ('text/x-tea',)),

myproject\Lib\site-packages\pip\_vendor\pygments\lexers\python.py:
  661      """
  662:     name = 'Python console session'
  663      aliases = ['pycon']

myproject\Lib\site-packages\pip\_vendor\requests\__init__.py:
  175  from .models import PreparedRequest, Request, Response
  176: from .sessions import Session, session
  177  from .status_codes import codes

myproject\Lib\site-packages\pip\_vendor\requests\adapters.py:
  103  
  104:     Provides a general-case interface for Requests sessions to contact HTTP and
  105      HTTPS urls by implementing the Transport Adapter interface. This class will
  106:     usually be created by the :class:`Session <Session>` class under the
  107      covers.

  122        >>> import requests
  123:       >>> s = requests.Session()
  124        >>> a = requests.adapters.HTTPAdapter(max_retries=3)

myproject\Lib\site-packages\pip\_vendor\requests\api.py:
  10  
  11: from . import sessions
  12  

  54  
  55:     # By using the 'with' statement we are sure the session is closed, thus we
  56      # avoid leaving sockets open which can trigger a ResourceWarning in some
  57      # cases, and look like a memory leak in others.
  58:     with sessions.Session() as session:
  59:         return session.request(method=method, url=url, **kwargs)
  60  

myproject\Lib\site-packages\pip\_vendor\requests\cookies.py:
  179  
  180:     This is the CookieJar we create by default for requests and sessions that
  181      don't specify one, since some clients may expect response.cookies and
  182:     session.cookies to support dict operations.
  183  

myproject\Lib\site-packages\pip\_vendor\requests\models.py:
  329  
  330:       >>> s = requests.Session()
  331        >>> s.send(r)

  772          """True if this Response is a well-formed HTTP redirect that could have
  773:         been processed automatically (by :meth:`Session.resolve_redirects`).
  774          """

myproject\Lib\site-packages\pip\_vendor\requests\sessions.py:
    1  """
    2: requests.sessions
    3  ~~~~~~~~~~~~~~~~~
    4  
    5: This module provides a Session object to manage and persist settings across
    6  requests (cookies, auth, proxies).

   60  
   61: def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
   62      """Determines appropriate setting for a given request, taking into account
   63:     the explicit setting on that request, and the setting in the session. If a
   64      setting is a dictionary, they will be merged together using `dict_class`

   66  
   67:     if session_setting is None:
   68          return request_setting

   70      if request_setting is None:
   71:         return session_setting
   72  

   74      if not (
   75:         isinstance(session_setting, Mapping) and isinstance(request_setting, Mapping)
   76      ):

   78  
   79:     merged_setting = dict_class(to_key_val_list(session_setting))
   80      merged_setting.update(to_key_val_list(request_setting))

   90  
   91: def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
   92:     """Properly merges both requests and session hooks.
   93  
   94      This is necessary because when request_hooks == {'response': []}, the
   95:     merge breaks Session hooks entirely.
   96      """
   97:     if session_hooks is None or session_hooks.get("response") == []:
   98          return request_hooks

  100      if request_hooks is None or request_hooks.get("response") == []:
  101:         return session_hooks
  102  
  103:     return merge_setting(request_hooks, session_hooks, dict_class)
  104  
  105  
  106: class SessionRedirectMixin:
  107      def get_redirect_target(self, resp):

  354  
  355: class Session(SessionRedirectMixin):
  356:     """A Requests session.
  357  

  362        >>> import requests
  363:       >>> s = requests.Session()
  364        >>> s.get('https://httpbin.org/get')

  368  
  369:       >>> with requests.Session() as s:
  370        ...     s.get('https://httpbin.org/get')

  392          #: :class:`Request <Request>` sent from this
  393:         #: :class:`Session <Session>`.
  394          self.headers = default_headers()

  440          #: A CookieJar containing all currently outstanding cookies set on this
  441:         #: session. By default it is a
  442          #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but

  460          merged from the :class:`Request <Request>` instance and those of the
  461:         :class:`Session`.
  462  
  463          :param request: :class:`Request` instance to prepare with this
  464:             session's settings.
  465          :rtype: requests.PreparedRequest

  472  
  473:         # Merge with session cookies
  474          merged_cookies = merge_cookies(

  794      def close(self):
  795:         """Closes all adapters and as such the session"""
  796          for v in self.adapters.values():

  818  
  819: def session():
  820      """
  821:     Returns a :class:`Session` for context-management.
  822  

  825          This method has been deprecated since version 1.0.0 and is only kept for
  826:         backwards compatibility. New code should use :class:`~requests.sessions.Session`
  827:         to create a session. This may be removed at a future date.
  828  
  829:     :rtype: Session
  830      """
  831:     return Session()

myproject\Lib\site-packages\pip\_vendor\urllib3\contrib\securetransport.py:
  539          if not verify or trust_bundle is not None:
  540:             result = Security.SSLSetSessionOption(
  541:                 self.context, SecurityConst.kSSLSessionOptionBreakOnServerAuth, True
  542              )

myproject\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\bindings.py:
  131  SSLConnectionType = c_uint32
  132: SSLSessionOption = c_uint32
  133  

  288  
  289:     Security.SSLSetSessionOption.argtypes = [SSLContextRef, SSLSessionOption, Boolean]
  290:     Security.SSLSetSessionOption.restype = OSStatus
  291  

  436  
  437:     kSSLSessionOptionBreakOnServerAuth = 0
  438  

myproject\Lib\site-packages\pip\_vendor\urllib3\util\ssl_.py:
  344  
  345:     # Enable logging of TLS session keys via defacto standard environment variable
  346      # 'SSLKEYLOGFILE', if the feature is available (Python 3.8+). Skip empty values.

myproject\Lib\site-packages\pip-22.3.1.dist-info\RECORD:
  164  pip/_internal/network/__pycache__/lazy_wheel.cpython-311.pyc,,
  165: pip/_internal/network/__pycache__/session.cpython-311.pyc,,
  166  pip/_internal/network/__pycache__/utils.cpython-311.pyc,,

  171  pip/_internal/network/lazy_wheel.py,sha256=PbPyuleNhtEq6b2S7rufoGXZWMD15FAGL4XeiAQ8FxA,7638
  172: pip/_internal/network/session.py,sha256=BpDOJ7_Xw5VkgPYWsePzcaqOfcyRZcB2AW7W0HGBST0,18443
  173  pip/_internal/network/utils.py,sha256=6A5SrUJEEUHxbGtbscwU2NpCyz-3ztiDlGWHpRRhsJ8,4073

  687  pip/_vendor/requests/__pycache__/packages.cpython-311.pyc,,
  688: pip/_vendor/requests/__pycache__/sessions.cpython-311.pyc,,
  689  pip/_vendor/requests/__pycache__/status_codes.cpython-311.pyc,,

  704  pip/_vendor/requests/packages.py,sha256=njJmVifY4aSctuW3PP5EFRCxjEwMRDO6J_feG2dKWsI,695
  705: pip/_vendor/requests/sessions.py,sha256=KUqJcRRLovNefUs7ScOXSUVCcfSayTFWtbiJ7gOSlTI,30180
  706  pip/_vendor/requests/status_codes.py,sha256=FvHmT5uH-_uimtRz5hH9VCbt7VV-Nei2J9upbej6j8g,4235

myproject\Lib\site-packages\sqlparse\keywords.py:
  520      'SERVER_NAME': tokens.Keyword,
  521:     'SESSION': tokens.Keyword,
  522:     'SESSION_USER': tokens.Keyword,
  523      'SETOF': tokens.Keyword,

myproject\Scripts\Activate.ps1:
   2  .Synopsis
   3: Activate a Python virtual environment for the current PowerShell session.
   4  

  63  .Synopsis
  64: Remove all shell session elements added by the Activate script, including the
  65  addition of the virtual environment's Python executable from the beginning of

  69  If present, do not remove this function from the global namespace for the
  70: session.
  71  

portfolio\settings.py:
  39      'django.contrib.contenttypes',
  40:     'django.contrib.sessions',
  41      'django.contrib.messages',

  49      'whitenoise.middleware.WhiteNoiseMiddleware',
  50:     'django.contrib.sessions.middleware.SessionMiddleware',
  51      'django.middleware.common.CommonMiddleware',

static\admin\js\filters.js:
   6      // Init filters.
   7:     let filters = JSON.parse(sessionStorage.getItem('django.admin.filtersState'));
   8  

  26              filters[`${event.target.dataset.filterTitle}`] = detail.open;
  27:             sessionStorage.setItem('django.admin.filtersState', JSON.stringify(filters));
  28          });

static\admin\js\nav_sidebar.js:
  85              }
  86:             sessionStorage.setItem('django.admin.navSidebarFilterValue', filterValue);
  87          }

  93  
  94:         const storedValue = sessionStorage.getItem('django.admin.navSidebarFilterValue');
  95          if (storedValue) {
